/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 6);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _fastclick = __webpack_require__(3);\n\nvar _fastclick2 = _interopRequireDefault(_fastclick);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_fastclick2.default.attach(document.body);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL19mYXN0Y2xpY2suanM/MTJkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfZmFzdGNsaWNrID0gcmVxdWlyZSgnZmFzdGNsaWNrJyk7XG5cbnZhciBfZmFzdGNsaWNrMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Zhc3RjbGljayk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl9mYXN0Y2xpY2syLmRlZmF1bHQuYXR0YWNoKGRvY3VtZW50LmJvZHkpO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vanMvX2Zhc3RjbGljay5qc1xuLy8gbW9kdWxlIGlkID0gMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _webfontloader = __webpack_require__(5);\n\nvar _webfontloader2 = _interopRequireDefault(_webfontloader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_webfontloader2.default.load({\n  google: {\n    families: ['Roboto']\n  }\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL19mb250cy5qcz9mMDViIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIF93ZWJmb250bG9hZGVyID0gcmVxdWlyZSgnd2ViZm9udGxvYWRlcicpO1xuXG52YXIgX3dlYmZvbnRsb2FkZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2ViZm9udGxvYWRlcik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbl93ZWJmb250bG9hZGVyMi5kZWZhdWx0LmxvYWQoe1xuICBnb29nbGU6IHtcbiAgICBmYW1pbGllczogWydSb2JvdG8nXVxuICB9XG59KTtcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2pzL19mb250cy5qc1xuLy8gbW9kdWxlIGlkID0gMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar _plyr = __webpack_require__(4);\n\nvar _plyr2 = _interopRequireDefault(_plyr);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_plyr2.default.setup({\n  iconUrl: '/wp-content/themes/flex-with-benefits/images/plyr.svg'\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL192aWRlb3MuanM/NjAyNyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBfcGx5ciA9IHJlcXVpcmUoJ3BseXInKTtcblxudmFyIF9wbHlyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BseXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5fcGx5cjIuZGVmYXVsdC5zZXR1cCh7XG4gIGljb25Vcmw6ICcvd3AtY29udGVudC90aGVtZXMvZmxleC13aXRoLWJlbmVmaXRzL2ltYWdlcy9wbHlyLnN2Zydcbn0pO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vanMvX3ZpZGVvcy5qc1xuLy8gbW9kdWxlIGlkID0gMlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=");

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function () {\n\t'use strict';\n\n\t/**\n\t * @preserve FastClick: polyfill to remove click delays on browsers with touch UIs.\n\t *\n\t * @codingstandard ftlabs-jsv2\n\t * @copyright The Financial Times Limited [All Rights Reserved]\n\t * @license MIT License (see LICENSE.txt)\n\t */\n\n\t/*jslint browser:true, node:true*/\n\t/*global define, Event, Node*/\n\n\n\t/**\n\t * Instantiate fast-clicking listeners on the specified layer.\n\t *\n\t * @constructor\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tfunction FastClick(layer, options) {\n\t\tvar oldOnClick;\n\n\t\toptions = options || {};\n\n\t\t/**\n\t\t * Whether a click is currently being tracked.\n\t\t *\n\t\t * @type boolean\n\t\t */\n\t\tthis.trackingClick = false;\n\n\n\t\t/**\n\t\t * Timestamp for when click tracking started.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.trackingClickStart = 0;\n\n\n\t\t/**\n\t\t * The element being tracked for a click.\n\t\t *\n\t\t * @type EventTarget\n\t\t */\n\t\tthis.targetElement = null;\n\n\n\t\t/**\n\t\t * X-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartX = 0;\n\n\n\t\t/**\n\t\t * Y-coordinate of touch start event.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchStartY = 0;\n\n\n\t\t/**\n\t\t * ID of the last touch, retrieved from Touch.identifier.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.lastTouchIdentifier = 0;\n\n\n\t\t/**\n\t\t * Touchmove boundary, beyond which a click will be cancelled.\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.touchBoundary = options.touchBoundary || 10;\n\n\n\t\t/**\n\t\t * The FastClick layer.\n\t\t *\n\t\t * @type Element\n\t\t */\n\t\tthis.layer = layer;\n\n\t\t/**\n\t\t * The minimum time between tap(touchstart and touchend) events\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapDelay = options.tapDelay || 200;\n\n\t\t/**\n\t\t * The maximum time for a tap\n\t\t *\n\t\t * @type number\n\t\t */\n\t\tthis.tapTimeout = options.tapTimeout || 700;\n\n\t\tif (FastClick.notNeeded(layer)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Some old versions of Android don't have Function.prototype.bind\n\t\tfunction bind(method, context) {\n\t\t\treturn function() { return method.apply(context, arguments); };\n\t\t}\n\n\n\t\tvar methods = ['onMouse', 'onClick', 'onTouchStart', 'onTouchMove', 'onTouchEnd', 'onTouchCancel'];\n\t\tvar context = this;\n\t\tfor (var i = 0, l = methods.length; i < l; i++) {\n\t\t\tcontext[methods[i]] = bind(context[methods[i]], context);\n\t\t}\n\n\t\t// Set up event handlers as required\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.addEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.addEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.addEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.addEventListener('click', this.onClick, true);\n\t\tlayer.addEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.addEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.addEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.addEventListener('touchcancel', this.onTouchCancel, false);\n\n\t\t// Hack is required for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t// which is how FastClick normally stops click events bubbling to callbacks registered on the FastClick\n\t\t// layer when they are cancelled.\n\t\tif (!Event.prototype.stopImmediatePropagation) {\n\t\t\tlayer.removeEventListener = function(type, callback, capture) {\n\t\t\t\tvar rmv = Node.prototype.removeEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\trmv.call(layer, type, callback.hijacked || callback, capture);\n\t\t\t\t} else {\n\t\t\t\t\trmv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlayer.addEventListener = function(type, callback, capture) {\n\t\t\t\tvar adv = Node.prototype.addEventListener;\n\t\t\t\tif (type === 'click') {\n\t\t\t\t\tadv.call(layer, type, callback.hijacked || (callback.hijacked = function(event) {\n\t\t\t\t\t\tif (!event.propagationStopped) {\n\t\t\t\t\t\t\tcallback(event);\n\t\t\t\t\t\t}\n\t\t\t\t\t}), capture);\n\t\t\t\t} else {\n\t\t\t\t\tadv.call(layer, type, callback, capture);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\t// If a handler is already declared in the element's onclick attribute, it will be fired before\n\t\t// FastClick's onClick handler. Fix this by pulling out the user-defined handler function and\n\t\t// adding it as listener.\n\t\tif (typeof layer.onclick === 'function') {\n\n\t\t\t// Android browser on at least 3.2 requires a new reference to the function in layer.onclick\n\t\t\t// - the old one won't work if passed to addEventListener directly.\n\t\t\toldOnClick = layer.onclick;\n\t\t\tlayer.addEventListener('click', function(event) {\n\t\t\t\toldOnClick(event);\n\t\t\t}, false);\n\t\t\tlayer.onclick = null;\n\t\t}\n\t}\n\n\t/**\n\t* Windows Phone 8.1 fakes user agent string to look like Android and iPhone.\n\t*\n\t* @type boolean\n\t*/\n\tvar deviceIsWindowsPhone = navigator.userAgent.indexOf(\"Windows Phone\") >= 0;\n\n\t/**\n\t * Android requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsAndroid = navigator.userAgent.indexOf('Android') > 0 && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS = /iP(ad|hone|od)/.test(navigator.userAgent) && !deviceIsWindowsPhone;\n\n\n\t/**\n\t * iOS 4 requires an exception for select elements.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOS4 = deviceIsIOS && (/OS 4_\\d(_\\d)?/).test(navigator.userAgent);\n\n\n\t/**\n\t * iOS 6.0-7.* requires the target element to be manually derived\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsIOSWithBadTarget = deviceIsIOS && (/OS [6-7]_\\d/).test(navigator.userAgent);\n\n\t/**\n\t * BlackBerry requires exceptions.\n\t *\n\t * @type boolean\n\t */\n\tvar deviceIsBlackBerry10 = navigator.userAgent.indexOf('BB10') > 0;\n\n\t/**\n\t * Determine whether a given element requires a native click.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element needs a native click\n\t */\n\tFastClick.prototype.needsClick = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\n\t\t// Don't send a synthetic click to disabled inputs (issue #62)\n\t\tcase 'button':\n\t\tcase 'select':\n\t\tcase 'textarea':\n\t\t\tif (target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'input':\n\n\t\t\t// File inputs need real clicks on iOS 6 due to a browser bug (issue #68)\n\t\t\tif ((deviceIsIOS && target.type === 'file') || target.disabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tbreak;\n\t\tcase 'label':\n\t\tcase 'iframe': // iOS8 homescreen apps can prevent events bubbling into frames\n\t\tcase 'video':\n\t\t\treturn true;\n\t\t}\n\n\t\treturn (/\\bneedsclick\\b/).test(target.className);\n\t};\n\n\n\t/**\n\t * Determine whether a given element requires a call to focus to simulate click into element.\n\t *\n\t * @param {EventTarget|Element} target Target DOM element\n\t * @returns {boolean} Returns true if the element requires a call to focus to simulate native click.\n\t */\n\tFastClick.prototype.needsFocus = function(target) {\n\t\tswitch (target.nodeName.toLowerCase()) {\n\t\tcase 'textarea':\n\t\t\treturn true;\n\t\tcase 'select':\n\t\t\treturn !deviceIsAndroid;\n\t\tcase 'input':\n\t\t\tswitch (target.type) {\n\t\t\tcase 'button':\n\t\t\tcase 'checkbox':\n\t\t\tcase 'file':\n\t\t\tcase 'image':\n\t\t\tcase 'radio':\n\t\t\tcase 'submit':\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// No point in attempting to focus disabled inputs\n\t\t\treturn !target.disabled && !target.readOnly;\n\t\tdefault:\n\t\t\treturn (/\\bneedsfocus\\b/).test(target.className);\n\t\t}\n\t};\n\n\n\t/**\n\t * Send a click event to the specified element.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t * @param {Event} event\n\t */\n\tFastClick.prototype.sendClick = function(targetElement, event) {\n\t\tvar clickEvent, touch;\n\n\t\t// On some Android devices activeElement needs to be blurred otherwise the synthetic click will have no effect (#24)\n\t\tif (document.activeElement && document.activeElement !== targetElement) {\n\t\t\tdocument.activeElement.blur();\n\t\t}\n\n\t\ttouch = event.changedTouches[0];\n\n\t\t// Synthesise a click event, with an extra attribute so it can be tracked\n\t\tclickEvent = document.createEvent('MouseEvents');\n\t\tclickEvent.initMouseEvent(this.determineEventType(targetElement), true, true, window, 1, touch.screenX, touch.screenY, touch.clientX, touch.clientY, false, false, false, false, 0, null);\n\t\tclickEvent.forwardedTouchEvent = true;\n\t\ttargetElement.dispatchEvent(clickEvent);\n\t};\n\n\tFastClick.prototype.determineEventType = function(targetElement) {\n\n\t\t//Issue #159: Android Chrome Select Box does not open with a synthetic click event\n\t\tif (deviceIsAndroid && targetElement.tagName.toLowerCase() === 'select') {\n\t\t\treturn 'mousedown';\n\t\t}\n\n\t\treturn 'click';\n\t};\n\n\n\t/**\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.focus = function(targetElement) {\n\t\tvar length;\n\n\t\t// Issue #160: on iOS 7, some input elements (e.g. date datetime month) throw a vague TypeError on setSelectionRange. These elements don't have an integer value for the selectionStart and selectionEnd properties, but unfortunately that can't be used for detection because accessing the properties also throws a TypeError. Just check the type instead. Filed as Apple bug #15122724.\n\t\tif (deviceIsIOS && targetElement.setSelectionRange && targetElement.type.indexOf('date') !== 0 && targetElement.type !== 'time' && targetElement.type !== 'month') {\n\t\t\tlength = targetElement.value.length;\n\t\t\ttargetElement.setSelectionRange(length, length);\n\t\t} else {\n\t\t\ttargetElement.focus();\n\t\t}\n\t};\n\n\n\t/**\n\t * Check whether the given target element is a child of a scrollable layer and if so, set a flag on it.\n\t *\n\t * @param {EventTarget|Element} targetElement\n\t */\n\tFastClick.prototype.updateScrollParent = function(targetElement) {\n\t\tvar scrollParent, parentElement;\n\n\t\tscrollParent = targetElement.fastClickScrollParent;\n\n\t\t// Attempt to discover whether the target element is contained within a scrollable layer. Re-check if the\n\t\t// target element was moved to another parent.\n\t\tif (!scrollParent || !scrollParent.contains(targetElement)) {\n\t\t\tparentElement = targetElement;\n\t\t\tdo {\n\t\t\t\tif (parentElement.scrollHeight > parentElement.offsetHeight) {\n\t\t\t\t\tscrollParent = parentElement;\n\t\t\t\t\ttargetElement.fastClickScrollParent = parentElement;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tparentElement = parentElement.parentElement;\n\t\t\t} while (parentElement);\n\t\t}\n\n\t\t// Always update the scroll top tracker if possible.\n\t\tif (scrollParent) {\n\t\t\tscrollParent.fastClickLastScrollTop = scrollParent.scrollTop;\n\t\t}\n\t};\n\n\n\t/**\n\t * @param {EventTarget} targetElement\n\t * @returns {Element|EventTarget}\n\t */\n\tFastClick.prototype.getTargetElementFromEventTarget = function(eventTarget) {\n\n\t\t// On some older browsers (notably Safari on iOS 4.1 - see issue #56) the event target may be a text node.\n\t\tif (eventTarget.nodeType === Node.TEXT_NODE) {\n\t\t\treturn eventTarget.parentNode;\n\t\t}\n\n\t\treturn eventTarget;\n\t};\n\n\n\t/**\n\t * On touch start, record the position and scroll offset.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchStart = function(event) {\n\t\tvar targetElement, touch, selection;\n\n\t\t// Ignore multiple touches, otherwise pinch-to-zoom is prevented if both fingers are on the FastClick element (issue #111).\n\t\tif (event.targetTouches.length > 1) {\n\t\t\treturn true;\n\t\t}\n\n\t\ttargetElement = this.getTargetElementFromEventTarget(event.target);\n\t\ttouch = event.targetTouches[0];\n\n\t\tif (deviceIsIOS) {\n\n\t\t\t// Only trusted events will deselect text on iOS (issue #49)\n\t\t\tselection = window.getSelection();\n\t\t\tif (selection.rangeCount && !selection.isCollapsed) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (!deviceIsIOS4) {\n\n\t\t\t\t// Weird things happen on iOS when an alert or confirm dialog is opened from a click event callback (issue #23):\n\t\t\t\t// when the user next taps anywhere else on the page, new touchstart and touchend events are dispatched\n\t\t\t\t// with the same identifier as the touch event that previously triggered the click that triggered the alert.\n\t\t\t\t// Sadly, there is an issue on iOS 4 that causes some normal touch events to have the same identifier as an\n\t\t\t\t// immediately preceeding touch event (issue #52), so this fix is unavailable on that platform.\n\t\t\t\t// Issue 120: touch.identifier is 0 when Chrome dev tools 'Emulate touch events' is set with an iOS device UA string,\n\t\t\t\t// which causes all touch events to be ignored. As this block only applies to iOS, and iOS identifiers are always long,\n\t\t\t\t// random integers, it's safe to to continue if the identifier is 0 here.\n\t\t\t\tif (touch.identifier && touch.identifier === this.lastTouchIdentifier) {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tthis.lastTouchIdentifier = touch.identifier;\n\n\t\t\t\t// If the target element is a child of a scrollable layer (using -webkit-overflow-scrolling: touch) and:\n\t\t\t\t// 1) the user does a fling scroll on the scrollable layer\n\t\t\t\t// 2) the user stops the fling scroll with another tap\n\t\t\t\t// then the event.target of the last 'touchend' event will be the element that was under the user's finger\n\t\t\t\t// when the fling scroll was started, causing FastClick to send a click event to that layer - unless a check\n\t\t\t\t// is made to ensure that a parent layer was not scrolled before sending a synthetic click (issue #42).\n\t\t\t\tthis.updateScrollParent(targetElement);\n\t\t\t}\n\t\t}\n\n\t\tthis.trackingClick = true;\n\t\tthis.trackingClickStart = event.timeStamp;\n\t\tthis.targetElement = targetElement;\n\n\t\tthis.touchStartX = touch.pageX;\n\t\tthis.touchStartY = touch.pageY;\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tevent.preventDefault();\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Based on a touchmove event object, check whether the touch has moved past a boundary since it started.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.touchHasMoved = function(event) {\n\t\tvar touch = event.changedTouches[0], boundary = this.touchBoundary;\n\n\t\tif (Math.abs(touch.pageX - this.touchStartX) > boundary || Math.abs(touch.pageY - this.touchStartY) > boundary) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Update the last position.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchMove = function(event) {\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the touch has moved, cancel the click tracking\n\t\tif (this.targetElement !== this.getTargetElementFromEventTarget(event.target) || this.touchHasMoved(event)) {\n\t\t\tthis.trackingClick = false;\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * Attempt to find the labelled control for the given label element.\n\t *\n\t * @param {EventTarget|HTMLLabelElement} labelElement\n\t * @returns {Element|null}\n\t */\n\tFastClick.prototype.findControl = function(labelElement) {\n\n\t\t// Fast path for newer browsers supporting the HTML5 control attribute\n\t\tif (labelElement.control !== undefined) {\n\t\t\treturn labelElement.control;\n\t\t}\n\n\t\t// All browsers under test that support touch events also support the HTML5 htmlFor attribute\n\t\tif (labelElement.htmlFor) {\n\t\t\treturn document.getElementById(labelElement.htmlFor);\n\t\t}\n\n\t\t// If no for attribute exists, attempt to retrieve the first labellable descendant element\n\t\t// the list of which is defined here: http://www.w3.org/TR/html5/forms.html#category-label\n\t\treturn labelElement.querySelector('button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea');\n\t};\n\n\n\t/**\n\t * On touch end, determine whether to send a click event at once.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onTouchEnd = function(event) {\n\t\tvar forElement, trackingClickStart, targetTagName, scrollParent, touch, targetElement = this.targetElement;\n\n\t\tif (!this.trackingClick) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Prevent phantom clicks on fast double-tap (issue #36)\n\t\tif ((event.timeStamp - this.lastClickTime) < this.tapDelay) {\n\t\t\tthis.cancelNextClick = true;\n\t\t\treturn true;\n\t\t}\n\n\t\tif ((event.timeStamp - this.trackingClickStart) > this.tapTimeout) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Reset to prevent wrong click cancel on input (issue #156).\n\t\tthis.cancelNextClick = false;\n\n\t\tthis.lastClickTime = event.timeStamp;\n\n\t\ttrackingClickStart = this.trackingClickStart;\n\t\tthis.trackingClick = false;\n\t\tthis.trackingClickStart = 0;\n\n\t\t// On some iOS devices, the targetElement supplied with the event is invalid if the layer\n\t\t// is performing a transition or scroll, and has to be re-detected manually. Note that\n\t\t// for this to function correctly, it must be called *after* the event target is checked!\n\t\t// See issue #57; also filed as rdar://13048589 .\n\t\tif (deviceIsIOSWithBadTarget) {\n\t\t\ttouch = event.changedTouches[0];\n\n\t\t\t// In certain cases arguments of elementFromPoint can be negative, so prevent setting targetElement to null\n\t\t\ttargetElement = document.elementFromPoint(touch.pageX - window.pageXOffset, touch.pageY - window.pageYOffset) || targetElement;\n\t\t\ttargetElement.fastClickScrollParent = this.targetElement.fastClickScrollParent;\n\t\t}\n\n\t\ttargetTagName = targetElement.tagName.toLowerCase();\n\t\tif (targetTagName === 'label') {\n\t\t\tforElement = this.findControl(targetElement);\n\t\t\tif (forElement) {\n\t\t\t\tthis.focus(targetElement);\n\t\t\t\tif (deviceIsAndroid) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\ttargetElement = forElement;\n\t\t\t}\n\t\t} else if (this.needsFocus(targetElement)) {\n\n\t\t\t// Case 1: If the touch started a while ago (best guess is 100ms based on tests for issue #36) then focus will be triggered anyway. Return early and unset the target element reference so that the subsequent click will be allowed through.\n\t\t\t// Case 2: Without this exception for input elements tapped when the document is contained in an iframe, then any inputted text won't be visible even though the value attribute is updated as the user types (issue #37).\n\t\t\tif ((event.timeStamp - trackingClickStart) > 100 || (deviceIsIOS && window.top !== window && targetTagName === 'input')) {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tthis.focus(targetElement);\n\t\t\tthis.sendClick(targetElement, event);\n\n\t\t\t// Select elements need the event to go through on iOS 4, otherwise the selector menu won't open.\n\t\t\t// Also this breaks opening selects when VoiceOver is active on iOS6, iOS7 (and possibly others)\n\t\t\tif (!deviceIsIOS || targetTagName !== 'select') {\n\t\t\t\tthis.targetElement = null;\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (deviceIsIOS && !deviceIsIOS4) {\n\n\t\t\t// Don't send a synthetic click event if the target element is contained within a parent layer that was scrolled\n\t\t\t// and this tap is being used to stop the scrolling (usually initiated by a fling - issue #42).\n\t\t\tscrollParent = targetElement.fastClickScrollParent;\n\t\t\tif (scrollParent && scrollParent.fastClickLastScrollTop !== scrollParent.scrollTop) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Prevent the actual click from going though - unless the target node is marked as requiring\n\t\t// real clicks or if it is in the whitelist in which case only non-programmatic clicks are permitted.\n\t\tif (!this.needsClick(targetElement)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.sendClick(targetElement, event);\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * On touch cancel, stop tracking the click.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.onTouchCancel = function() {\n\t\tthis.trackingClick = false;\n\t\tthis.targetElement = null;\n\t};\n\n\n\t/**\n\t * Determine mouse events which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onMouse = function(event) {\n\n\t\t// If a target element was never set (because a touch event was never fired) allow the event\n\t\tif (!this.targetElement) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (event.forwardedTouchEvent) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Programmatically generated events targeting a specific element should be permitted\n\t\tif (!event.cancelable) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Derive and check the target element to see whether the mouse event needs to be permitted;\n\t\t// unless explicitly enabled, prevent non-touch click events from triggering actions,\n\t\t// to prevent ghost/doubleclicks.\n\t\tif (!this.needsClick(this.targetElement) || this.cancelNextClick) {\n\n\t\t\t// Prevent any user-added listeners declared on FastClick element from being fired.\n\t\t\tif (event.stopImmediatePropagation) {\n\t\t\t\tevent.stopImmediatePropagation();\n\t\t\t} else {\n\n\t\t\t\t// Part of the hack for browsers that don't support Event#stopImmediatePropagation (e.g. Android 2)\n\t\t\t\tevent.propagationStopped = true;\n\t\t\t}\n\n\t\t\t// Cancel the event\n\t\t\tevent.stopPropagation();\n\t\t\tevent.preventDefault();\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the mouse event is permitted, return true for the action to go through.\n\t\treturn true;\n\t};\n\n\n\t/**\n\t * On actual clicks, determine whether this is a touch-generated click, a click action occurring\n\t * naturally after a delay after a touch (which needs to be cancelled to avoid duplication), or\n\t * an actual click which should be permitted.\n\t *\n\t * @param {Event} event\n\t * @returns {boolean}\n\t */\n\tFastClick.prototype.onClick = function(event) {\n\t\tvar permitted;\n\n\t\t// It's possible for another FastClick-like library delivered with third-party code to fire a click event before FastClick does (issue #44). In that case, set the click-tracking flag back to false and return early. This will cause onTouchEnd to return early.\n\t\tif (this.trackingClick) {\n\t\t\tthis.targetElement = null;\n\t\t\tthis.trackingClick = false;\n\t\t\treturn true;\n\t\t}\n\n\t\t// Very odd behaviour on iOS (issue #18): if a submit element is present inside a form and the user hits enter in the iOS simulator or clicks the Go button on the pop-up OS keyboard the a kind of 'fake' click event will be triggered with the submit-type input element as the target.\n\t\tif (event.target.type === 'submit' && event.detail === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tpermitted = this.onMouse(event);\n\n\t\t// Only unset targetElement if the click is not permitted. This will ensure that the check for !targetElement in onMouse fails and the browser's click doesn't go through.\n\t\tif (!permitted) {\n\t\t\tthis.targetElement = null;\n\t\t}\n\n\t\t// If clicks are permitted, return true for the action to go through.\n\t\treturn permitted;\n\t};\n\n\n\t/**\n\t * Remove all FastClick's event listeners.\n\t *\n\t * @returns {void}\n\t */\n\tFastClick.prototype.destroy = function() {\n\t\tvar layer = this.layer;\n\n\t\tif (deviceIsAndroid) {\n\t\t\tlayer.removeEventListener('mouseover', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mousedown', this.onMouse, true);\n\t\t\tlayer.removeEventListener('mouseup', this.onMouse, true);\n\t\t}\n\n\t\tlayer.removeEventListener('click', this.onClick, true);\n\t\tlayer.removeEventListener('touchstart', this.onTouchStart, false);\n\t\tlayer.removeEventListener('touchmove', this.onTouchMove, false);\n\t\tlayer.removeEventListener('touchend', this.onTouchEnd, false);\n\t\tlayer.removeEventListener('touchcancel', this.onTouchCancel, false);\n\t};\n\n\n\t/**\n\t * Check whether FastClick is needed.\n\t *\n\t * @param {Element} layer The layer to listen on\n\t */\n\tFastClick.notNeeded = function(layer) {\n\t\tvar metaViewport;\n\t\tvar chromeVersion;\n\t\tvar blackberryVersion;\n\t\tvar firefoxVersion;\n\n\t\t// Devices that don't support touch don't need FastClick\n\t\tif (typeof window.ontouchstart === 'undefined') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Chrome version - zero for other browsers\n\t\tchromeVersion = +(/Chrome\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (chromeVersion) {\n\n\t\t\tif (deviceIsAndroid) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// Chrome on Android with user-scalable=\"no\" doesn't need FastClick (issue #89)\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// Chrome 32 and above with width=device-width or less don't need FastClick\n\t\t\t\t\tif (chromeVersion > 31 && document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// Chrome desktop doesn't need FastClick (issue #15)\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\tif (deviceIsBlackBerry10) {\n\t\t\tblackberryVersion = navigator.userAgent.match(/Version\\/([0-9]*)\\.([0-9]*)/);\n\n\t\t\t// BlackBerry 10.3+ does not require Fastclick library.\n\t\t\t// https://github.com/ftlabs/fastclick/issues/251\n\t\t\tif (blackberryVersion[1] >= 10 && blackberryVersion[2] >= 3) {\n\t\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\n\t\t\t\tif (metaViewport) {\n\t\t\t\t\t// user-scalable=no eliminates click delay.\n\t\t\t\t\tif (metaViewport.content.indexOf('user-scalable=no') !== -1) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\t// width=device-width (or less than device-width) eliminates click delay.\n\t\t\t\t\tif (document.documentElement.scrollWidth <= window.outerWidth) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// IE10 with -ms-touch-action: none or manipulation, which disables double-tap-to-zoom (issue #97)\n\t\tif (layer.style.msTouchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Firefox version - zero for other browsers\n\t\tfirefoxVersion = +(/Firefox\\/([0-9]+)/.exec(navigator.userAgent) || [,0])[1];\n\n\t\tif (firefoxVersion >= 27) {\n\t\t\t// Firefox 27+ does not have tap delay if the content is not zoomable - https://bugzilla.mozilla.org/show_bug.cgi?id=922896\n\n\t\t\tmetaViewport = document.querySelector('meta[name=viewport]');\n\t\t\tif (metaViewport && (metaViewport.content.indexOf('user-scalable=no') !== -1 || document.documentElement.scrollWidth <= window.outerWidth)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// IE11: prefixed -ms-touch-action is no longer supported and it's recomended to use non-prefixed version\n\t\t// http://msdn.microsoft.com/en-us/library/windows/apps/Hh767313.aspx\n\t\tif (layer.style.touchAction === 'none' || layer.style.touchAction === 'manipulation') {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Factory method for creating a FastClick object\n\t *\n\t * @param {Element} layer The layer to listen on\n\t * @param {Object} [options={}] The options to override the defaults\n\t */\n\tFastClick.attach = function(layer, options) {\n\t\treturn new FastClick(layer, options);\n\t};\n\n\n\tif (true) {\n\n\t\t// AMD. Register as an anonymous module.\n\t\t!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {\n\t\t\treturn FastClick;\n\t\t}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else if (typeof module !== 'undefined' && module.exports) {\n\t\tmodule.exports = FastClick.attach;\n\t\tmodule.exports.FastClick = FastClick;\n\t} else {\n\t\twindow.FastClick = FastClick;\n\t}\n}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// ==========================================================================\n// Plyr\n// plyr.js v2.0.11\n// https://github.com/selz/plyr\n// License: The MIT License (MIT)\n// ==========================================================================\n// Credits: http://paypal.github.io/accessible-html5-video-player/\n// ==========================================================================\n\n;(function(root, factory) {\n    'use strict';\n    /*global define,module*/\n\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        // Node, CommonJS-like\n        module.exports = factory(root, document);\n    } else if (true) {\n        // AMD\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () { return factory(root, document); }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else {\n        // Browser globals (root is window)\n        root.plyr = factory(root, document);\n    }\n}(typeof window !== 'undefined' ? window : this, function(window, document) {\n    'use strict';\n\n    // Globals\n    var fullscreen,\n    scroll = { x: 0, y: 0 },\n\n    // Default config\n    defaults = {\n        enabled:                true,\n        debug:                  false,\n        autoplay:               false,\n        loop:                   false,\n        seekTime:               10,\n        volume:                 10,\n        volumeMin:              0,\n        volumeMax:              10,\n        volumeStep:             1,\n        duration:               null,\n        displayDuration:        true,\n        loadSprite:             true,\n        iconPrefix:             'plyr',\n        iconUrl:                'https://cdn.plyr.io/2.0.11/plyr.svg',\n        clickToPlay:            true,\n        hideControls:           true,\n        showPosterOnEnd:        false,\n        disableContextMenu:     true,\n        keyboardShorcuts:       {\n            focused:            true,\n            global:             false\n        },\n        tooltips: {\n            controls:           false,\n            seek:               true\n        },\n        selectors: {\n            html5:              'video, audio',\n            embed:              '[data-type]',\n            editable:           'input, textarea, select, [contenteditable]',\n            container:          '.plyr',\n            controls: {\n                container:      null,\n                wrapper:        '.plyr__controls'\n            },\n            labels:             '[data-plyr]',\n            buttons: {\n                seek:           '[data-plyr=\"seek\"]',\n                play:           '[data-plyr=\"play\"]',\n                pause:          '[data-plyr=\"pause\"]',\n                restart:        '[data-plyr=\"restart\"]',\n                rewind:         '[data-plyr=\"rewind\"]',\n                forward:        '[data-plyr=\"fast-forward\"]',\n                mute:           '[data-plyr=\"mute\"]',\n                captions:       '[data-plyr=\"captions\"]',\n                fullscreen:     '[data-plyr=\"fullscreen\"]'\n            },\n            volume: {\n                input:          '[data-plyr=\"volume\"]',\n                display:        '.plyr__volume--display'\n            },\n            progress: {\n                container:      '.plyr__progress',\n                buffer:         '.plyr__progress--buffer',\n                played:         '.plyr__progress--played'\n            },\n            captions:           '.plyr__captions',\n            currentTime:        '.plyr__time--current',\n            duration:           '.plyr__time--duration'\n        },\n        classes: {\n            setup:              'plyr--setup',\n            ready:              'plyr--ready',\n            videoWrapper:       'plyr__video-wrapper',\n            embedWrapper:       'plyr__video-embed',\n            type:               'plyr--{0}',\n            stopped:            'plyr--stopped',\n            playing:            'plyr--playing',\n            muted:              'plyr--muted',\n            loading:            'plyr--loading',\n            hover:              'plyr--hover',\n            tooltip:            'plyr__tooltip',\n            hidden:             'plyr__sr-only',\n            hideControls:       'plyr--hide-controls',\n            isIos:              'plyr--is-ios',\n            isTouch:            'plyr--is-touch',\n            captions: {\n                enabled:        'plyr--captions-enabled',\n                active:         'plyr--captions-active'\n            },\n            fullscreen: {\n                enabled:        'plyr--fullscreen-enabled',\n                active:         'plyr--fullscreen-active'\n            },\n            tabFocus:           'tab-focus'\n        },\n        captions: {\n            defaultActive:      false\n        },\n        fullscreen: {\n            enabled:            true,\n            fallback:           true,\n            allowAudio:         false\n        },\n        storage: {\n            enabled:            true,\n            key:                'plyr'\n        },\n        controls:               ['play-large', 'play', 'progress', 'current-time', 'mute', 'volume', 'captions', 'fullscreen'],\n        i18n: {\n            restart:            'Restart',\n            rewind:             'Rewind {seektime} secs',\n            play:               'Play',\n            pause:              'Pause',\n            forward:            'Forward {seektime} secs',\n            played:             'played',\n            buffered:           'buffered',\n            currentTime:        'Current time',\n            duration:           'Duration',\n            volume:             'Volume',\n            toggleMute:         'Toggle Mute',\n            toggleCaptions:     'Toggle Captions',\n            toggleFullscreen:   'Toggle Fullscreen',\n            frameTitle:         'Player for {title}'\n        },\n        types: {\n            embed:              ['youtube', 'vimeo', 'soundcloud'],\n            html5:              ['video', 'audio']\n        },\n        // URLs\n        urls: {\n            vimeo: {\n                api:            'https://player.vimeo.com/api/player.js',\n            },\n            youtube: {\n                api:            'https://www.youtube.com/iframe_api'\n            },\n            soundcloud: {\n                api:            'https://w.soundcloud.com/player/api.js'\n            }\n        },\n        // Custom control listeners\n        listeners: {\n            seek:               null,\n            play:               null,\n            pause:              null,\n            restart:            null,\n            rewind:             null,\n            forward:            null,\n            mute:               null,\n            volume:             null,\n            captions:           null,\n            fullscreen:         null\n        },\n        // Events to watch on HTML5 media elements\n        events:                 ['ready', 'ended', 'progress', 'stalled', 'playing', 'waiting', 'canplay', 'canplaythrough', 'loadstart', 'loadeddata', 'loadedmetadata', 'timeupdate', 'volumechange', 'play', 'pause', 'error', 'seeking', 'seeked', 'emptied'],\n        // Logging\n        logPrefix:              '[Plyr]'\n    };\n\n    // Credits: http://paypal.github.io/accessible-html5-video-player/\n    // Unfortunately, due to mixed support, UA sniffing is required\n    function _browserSniff() {\n        var ua = navigator.userAgent,\n            name = navigator.appName,\n            fullVersion = '' + parseFloat(navigator.appVersion),\n            majorVersion = parseInt(navigator.appVersion, 10),\n            nameOffset,\n            verOffset,\n            ix,\n            isIE = false,\n            isFirefox = false,\n            isChrome = false,\n            isSafari = false;\n\n        if ((navigator.appVersion.indexOf('Windows NT') !== -1) && (navigator.appVersion.indexOf('rv:11') !== -1)) {\n            // MSIE 11\n            isIE = true;\n            name = 'IE';\n            fullVersion = '11';\n        } else if ((verOffset = ua.indexOf('MSIE')) !== -1) {\n            // MSIE\n            isIE = true;\n            name = 'IE';\n            fullVersion = ua.substring(verOffset + 5);\n        } else if ((verOffset = ua.indexOf('Chrome')) !== -1) {\n            // Chrome\n            isChrome = true;\n            name = 'Chrome';\n            fullVersion = ua.substring(verOffset + 7);\n        } else if ((verOffset = ua.indexOf('Safari')) !== -1) {\n            // Safari\n            isSafari = true;\n            name = 'Safari';\n            fullVersion = ua.substring(verOffset + 7);\n            if ((verOffset = ua.indexOf('Version')) !== -1) {\n                fullVersion = ua.substring(verOffset + 8);\n            }\n        } else if ((verOffset = ua.indexOf('Firefox')) !== -1) {\n            // Firefox\n            isFirefox = true;\n            name = 'Firefox';\n            fullVersion = ua.substring(verOffset + 8);\n        } else if ((nameOffset = ua.lastIndexOf(' ') + 1) < (verOffset = ua.lastIndexOf('/'))) {\n            // In most other browsers, 'name/version' is at the end of userAgent\n            name = ua.substring(nameOffset,verOffset);\n            fullVersion = ua.substring(verOffset + 1);\n\n            if (name.toLowerCase() === name.toUpperCase()) {\n                name = navigator.appName;\n            }\n        }\n\n        // Trim the fullVersion string at semicolon/space if present\n        if ((ix = fullVersion.indexOf(';')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n        }\n        if ((ix = fullVersion.indexOf(' ')) !== -1) {\n            fullVersion = fullVersion.substring(0, ix);\n        }\n\n        // Get major version\n        majorVersion = parseInt('' + fullVersion, 10);\n        if (isNaN(majorVersion)) {\n            fullVersion = '' + parseFloat(navigator.appVersion);\n            majorVersion = parseInt(navigator.appVersion, 10);\n        }\n\n        // Return data\n        return {\n            name:       name,\n            version:    majorVersion,\n            isIE:       isIE,\n            isFirefox:  isFirefox,\n            isChrome:   isChrome,\n            isSafari:   isSafari,\n            isIos:      /(iPad|iPhone|iPod)/g.test(navigator.platform),\n            isIphone:   /(iPhone|iPod)/g.test(navigator.userAgent),\n            isTouch:    'ontouchstart' in document.documentElement\n        };\n    }\n\n    // Check for mime type support against a player instance\n    // Credits: http://diveintohtml5.info/everything.html\n    // Related: http://www.leanbackplyr.com/test/h5mt.html\n    function _supportMime(plyr, mimeType) {\n        var media = plyr.media;\n\n        if (plyr.type === 'video') {\n            // Check type\n            switch (mimeType) {\n                case 'video/webm':   return !!(media.canPlayType && media.canPlayType('video/webm; codecs=\"vp8, vorbis\"').replace(/no/, ''));\n                case 'video/mp4':    return !!(media.canPlayType && media.canPlayType('video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"').replace(/no/, ''));\n                case 'video/ogg':    return !!(media.canPlayType && media.canPlayType('video/ogg; codecs=\"theora\"').replace(/no/, ''));\n            }\n        } else if (plyr.type === 'audio') {\n            // Check type\n            switch (mimeType) {\n                case 'audio/mpeg':   return !!(media.canPlayType && media.canPlayType('audio/mpeg;').replace(/no/, ''));\n                case 'audio/ogg':    return !!(media.canPlayType && media.canPlayType('audio/ogg; codecs=\"vorbis\"').replace(/no/, ''));\n                case 'audio/wav':    return !!(media.canPlayType && media.canPlayType('audio/wav; codecs=\"1\"').replace(/no/, ''));\n            }\n        }\n\n        // If we got this far, we're stuffed\n        return false;\n    }\n\n    // Inject a script\n    function _injectScript(source) {\n        if (document.querySelectorAll('script[src=\"' + source + '\"]').length) {\n            return;\n        }\n\n        var tag = document.createElement('script');\n        tag.src = source;\n        var firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n    }\n\n    // Element exists in an array\n    function _inArray(haystack, needle) {\n        return Array.prototype.indexOf && (haystack.indexOf(needle) !== -1);\n    }\n\n    // Replace all\n    function _replaceAll(string, find, replace) {\n        return string.replace(new RegExp(find.replace(/([.*+?\\^=!:${}()|\\[\\]\\/\\\\])/g, '\\\\$1'), 'g'), replace);\n    }\n\n    // Wrap an element\n    function _wrap(elements, wrapper) {\n        // Convert `elements` to an array, if necessary.\n        if (!elements.length) {\n            elements = [elements];\n        }\n\n        // Loops backwards to prevent having to clone the wrapper on the\n        // first element (see `child` below).\n        for (var i = elements.length - 1; i >= 0; i--) {\n            var child   = (i > 0) ? wrapper.cloneNode(true) : wrapper;\n            var element = elements[i];\n\n            // Cache the current parent and sibling.\n            var parent  = element.parentNode;\n            var sibling = element.nextSibling;\n\n            // Wrap the element (is automatically removed from its current\n            // parent).\n            child.appendChild(element);\n\n            // If the element had a sibling, insert the wrapper before\n            // the sibling to maintain the HTML structure; otherwise, just\n            // append it to the parent.\n            if (sibling) {\n                parent.insertBefore(child, sibling);\n            } else {\n                parent.appendChild(child);\n            }\n\n            return child;\n        }\n    }\n\n    // Unwrap an element\n    // http://plainjs.com/javascript/manipulation/unwrap-a-dom-element-35/\n    /*function _unwrap(wrapper) {\n        // Get the element's parent node\n        var parent = wrapper.parentNode;\n\n        // Move all children out of the element\n        while (wrapper.firstChild) {\n            parent.insertBefore(wrapper.firstChild, wrapper);\n        }\n\n        // Remove the empty element\n        parent.removeChild(wrapper);\n    }*/\n\n    // Remove an element\n    function _remove(element) {\n        if (!element) {\n            return;\n        }\n        element.parentNode.removeChild(element);\n    }\n\n    // Prepend child\n    function _prependChild(parent, element) {\n        parent.insertBefore(element, parent.firstChild);\n    }\n\n    // Set attributes\n    function _setAttributes(element, attributes) {\n        for (var key in attributes) {\n            element.setAttribute(key, (_is.boolean(attributes[key]) && attributes[key]) ? '' : attributes[key]);\n        }\n    }\n\n    // Insert a HTML element\n    function _insertElement(type, parent, attributes) {\n        // Create a new <element>\n        var element = document.createElement(type);\n\n        // Set all passed attributes\n        _setAttributes(element, attributes);\n\n        // Inject the new element\n        _prependChild(parent, element);\n    }\n\n    // Get a classname from selector\n    function _getClassname(selector) {\n        return selector.replace('.', '');\n    }\n\n    // Toggle class on an element\n    function _toggleClass(element, className, state) {\n        if (element) {\n            if (element.classList) {\n                element.classList[state ? 'add' : 'remove'](className);\n            } else {\n                var name = (' ' + element.className + ' ').replace(/\\s+/g, ' ').replace(' ' + className + ' ', '');\n                element.className = name + (state ? ' ' + className : '');\n            }\n        }\n    }\n\n    // Has class name\n    function _hasClass(element, className) {\n        if (element) {\n            if (element.classList) {\n                return element.classList.contains(className);\n            } else {\n                return new RegExp('(\\\\s|^)' + className + '(\\\\s|$)').test(element.className);\n            }\n        }\n        return false;\n    }\n\n    // Element matches selector\n    function _matches(element, selector) {\n        var p = Element.prototype;\n\n        var f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function(s) {\n            return [].indexOf.call(document.querySelectorAll(s), this) !== -1;\n        };\n\n        return f.call(element, selector);\n    }\n\n    // Bind along with custom handler\n    function _proxyListener(element, eventName, userListener, defaultListener, useCapture) {\n        _on(element, eventName, function(event) {\n            if (userListener) {\n                userListener.apply(element, [event]);\n            }\n            defaultListener.apply(element, [event]);\n        }, useCapture);\n    }\n\n    // Toggle event listener\n    function _toggleListener(element, events, callback, toggle, useCapture) {\n        var eventList = events.split(' ');\n\n        // Whether the listener is a capturing listener or not\n        // Default to false\n        if (!_is.boolean(useCapture)) {\n            useCapture = false;\n        }\n\n        // If a nodelist is passed, call itself on each node\n        if (element instanceof NodeList) {\n            for (var x = 0; x < element.length; x++) {\n                if (element[x] instanceof Node) {\n                    _toggleListener(element[x], arguments[1], arguments[2], arguments[3]);\n                }\n            }\n            return;\n        }\n\n        // If a single node is passed, bind the event listener\n        for (var i = 0; i < eventList.length; i++) {\n            element[toggle ? 'addEventListener' : 'removeEventListener'](eventList[i], callback, useCapture);\n        }\n    }\n\n    // Bind event\n    function _on(element, events, callback, useCapture) {\n        if (element) {\n            _toggleListener(element, events, callback, true, useCapture);\n        }\n    }\n\n    // Unbind event\n    /*function _off(element, events, callback, useCapture) {\n        if (element) {\n            _toggleListener(element, events, callback, false, useCapture);\n        }\n    }*/\n\n    // Trigger event\n    function _event(element, type, bubbles, properties) {\n        // Bail if no element\n        if (!element || !type) {\n            return;\n        }\n\n        // Default bubbles to false\n        if (!_is.boolean(bubbles)) {\n            bubbles = false;\n        }\n\n        // Create and dispatch the event\n        var event = new CustomEvent(type, {\n            bubbles:    bubbles,\n            detail:     properties\n        });\n\n        // Dispatch the event\n        element.dispatchEvent(event);\n    }\n\n    // Toggle aria-pressed state on a toggle button\n    // http://www.ssbbartgroup.com/blog/how-not-to-misuse-aria-states-properties-and-roles\n    function _toggleState(target, state) {\n        // Bail if no target\n        if (!target) {\n            return;\n        }\n\n        // Get state\n        state = (_is.boolean(state) ? state : !target.getAttribute('aria-pressed'));\n\n        // Set the attribute on target\n        target.setAttribute('aria-pressed', state);\n\n        return state;\n    }\n\n    // Get percentage\n    function _getPercentage(current, max) {\n        if (current === 0 || max === 0 || isNaN(current) || isNaN(max)) {\n            return 0;\n        }\n        return ((current / max) * 100).toFixed(2);\n    }\n\n    // Deep extend/merge destination object with N more objects\n    // http://andrewdupont.net/2009/08/28/deep-extending-objects-in-javascript/\n    // Removed call to arguments.callee (used explicit function name instead)\n    function _extend() {\n        // Get arguments\n        var objects = arguments;\n\n        // Bail if nothing to merge\n        if (!objects.length) {\n            return;\n        }\n\n        // Return first if specified but nothing to merge\n        if (objects.length === 1) {\n            return objects[0];\n        }\n\n        // First object is the destination\n        var destination = Array.prototype.shift.call(objects),\n            length      = objects.length;\n\n        // Loop through all objects to merge\n        for (var i = 0; i < length; i++) {\n            var source = objects[i];\n\n            for (var property in source) {\n                if (source[property] && source[property].constructor && source[property].constructor === Object) {\n                    destination[property] = destination[property] || {};\n                    _extend(destination[property], source[property]);\n                } else {\n                    destination[property] = source[property];\n                }\n            }\n        }\n\n        return destination;\n    }\n\n    // Check variable types\n    var _is = {\n        object: function(input) {\n            return input !== null && typeof(input) === 'object';\n        },\n        array: function(input) {\n            return input !== null && (typeof(input) === 'object' && input.constructor === Array);\n        },\n        number: function(input) {\n            return input !== null && (typeof(input) === 'number' && !isNaN(input - 0) || (typeof input === 'object' && input.constructor === Number));\n        },\n        string: function(input) {\n            return input !== null && (typeof input === 'string' || (typeof input === 'object' && input.constructor === String));\n        },\n        boolean: function(input) {\n            return input !== null && typeof input === 'boolean';\n        },\n        nodeList: function(input) {\n            return input !== null && input instanceof NodeList;\n        },\n        htmlElement: function(input) {\n            return input !== null && input instanceof HTMLElement;\n        },\n        function: function(input) {\n            return input !== null && typeof input === 'function';\n        },\n        undefined: function(input) {\n            return input !== null && typeof input === 'undefined';\n        }\n    };\n\n    // Parse YouTube ID from url\n    function _parseYouTubeId(url) {\n        var regex = /^.*(youtu.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n        return (url.match(regex)) ? RegExp.$2 : url;\n    }\n\n    // Parse Vimeo ID from url\n    function _parseVimeoId(url) {\n        var regex = /^.*(vimeo.com\\/|video\\/)(\\d+).*/;\n        return (url.match(regex)) ? RegExp.$2 : url;\n    }\n\n    // Fullscreen API\n    function _fullscreen() {\n        var fullscreen = {\n                supportsFullScreen: false,\n                isFullScreen: function() { return false; },\n                requestFullScreen: function() {},\n                cancelFullScreen: function() {},\n                fullScreenEventName: '',\n                element: null,\n                prefix: ''\n            },\n            browserPrefixes = 'webkit o moz ms khtml'.split(' ');\n\n        // Check for native support\n        if (!_is.undefined(document.cancelFullScreen)) {\n            fullscreen.supportsFullScreen = true;\n        } else {\n            // Check for fullscreen support by vendor prefix\n            for (var i = 0, il = browserPrefixes.length; i < il; i++ ) {\n                fullscreen.prefix = browserPrefixes[i];\n\n                if (!_is.undefined(document[fullscreen.prefix + 'CancelFullScreen'])) {\n                    fullscreen.supportsFullScreen = true;\n                    break;\n                } else if (!_is.undefined(document.msExitFullscreen) && document.msFullscreenEnabled) {\n                    // Special case for MS (when isn't it?)\n                    fullscreen.prefix = 'ms';\n                    fullscreen.supportsFullScreen = true;\n                    break;\n                }\n            }\n        }\n\n        // Update methods to do something useful\n        if (fullscreen.supportsFullScreen) {\n            // Yet again Microsoft awesomeness,\n            // Sometimes the prefix is 'ms', sometimes 'MS' to keep you on your toes\n            fullscreen.fullScreenEventName = (fullscreen.prefix === 'ms' ? 'MSFullscreenChange' : fullscreen.prefix + 'fullscreenchange');\n\n            fullscreen.isFullScreen = function(element) {\n                if (_is.undefined(element)) {\n                    element = document.body;\n                }\n                switch (this.prefix) {\n                    case '':\n                        return document.fullscreenElement === element;\n                    case 'moz':\n                        return document.mozFullScreenElement === element;\n                    default:\n                        return document[this.prefix + 'FullscreenElement'] === element;\n                }\n            };\n            fullscreen.requestFullScreen = function(element) {\n                if (_is.undefined(element)) {\n                    element = document.body;\n                }\n                return (this.prefix === '') ? element.requestFullScreen() : element[this.prefix + (this.prefix === 'ms' ? 'RequestFullscreen' : 'RequestFullScreen')]();\n            };\n            fullscreen.cancelFullScreen = function() {\n                return (this.prefix === '') ? document.cancelFullScreen() : document[this.prefix + (this.prefix === 'ms' ? 'ExitFullscreen' : 'CancelFullScreen')]();\n            };\n            fullscreen.element = function() {\n                return (this.prefix === '') ? document.fullscreenElement : document[this.prefix + 'FullscreenElement'];\n            };\n        }\n\n        return fullscreen;\n    }\n\n    // Local storage\n    var _storage = {\n        supported: (function() {\n            if (!('localStorage' in window)) {\n                return false;\n            }\n\n            // Try to use it (it might be disabled, e.g. user is in private/porn mode)\n            // see: https://github.com/Selz/plyr/issues/131\n            try {\n                // Add test item\n                window.localStorage.setItem('___test', 'OK');\n\n                // Get the test item\n                var result = window.localStorage.getItem('___test');\n\n                // Clean up\n                window.localStorage.removeItem('___test');\n\n                // Check if value matches\n                return (result === 'OK');\n            }\n            catch (e) {\n                return false;\n            }\n\n            return false;\n        })()\n    };\n\n    // Player instance\n    function Plyr(media, config) {\n        var plyr = this,\n        timers = {},\n        api;\n\n        // Set media\n        plyr.media = media;\n        var original = media.cloneNode(true);\n\n        // Trigger events, with plyr instance passed\n        function _triggerEvent(element, type, bubbles, properties) {\n            _event(element, type, bubbles, _extend({}, properties, {\n                plyr: api\n            }));\n        }\n\n        // Debugging\n        function _console(type, args) {\n            if (config.debug && window.console) {\n                args = Array.prototype.slice.call(args);\n\n                if (_is.string(config.logPrefix) && config.logPrefix.length) {\n                    args.unshift(config.logPrefix);\n                }\n\n                console[type].apply(console, args);\n            }\n        }\n        var _log = function() { _console('log', arguments) },\n            _warn = function() { _console('warn', arguments) };\n\n        // Log config options\n        _log('Config', config);\n\n        // Get icon URL\n        function _getIconUrl() {\n            return {\n                url:        config.iconUrl,\n                absolute:   (config.iconUrl.indexOf(\"http\") === 0) || plyr.browser.isIE\n            };\n        }\n\n        // Build the default HTML\n        function _buildControls() {\n            // Create html array\n            var html        = [],\n                iconUrl     = _getIconUrl(),\n                iconPath    = (!iconUrl.absolute ? iconUrl.url : '') + '#' + config.iconPrefix;\n\n            // Larger overlaid play button\n            if (_inArray(config.controls, 'play-large')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"play\" class=\"plyr__play-large\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n                    '</button>'\n                );\n            }\n\n            html.push('<div class=\"plyr__controls\">');\n\n            // Restart button\n            if (_inArray(config.controls, 'restart')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"restart\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-restart\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.restart + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Rewind button\n            if (_inArray(config.controls, 'rewind')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"rewind\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-rewind\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.rewind + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Play Pause button\n            // TODO: This should be a toggle button really?\n            if (_inArray(config.controls, 'play')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"play\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-play\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.play + '</span>',\n                    '</button>',\n                    '<button type=\"button\" data-plyr=\"pause\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-pause\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.pause + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Fast forward button\n            if (_inArray(config.controls, 'fast-forward')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"fast-forward\">',\n                        '<svg><use xlink:href=\"' + iconPath + '-fast-forward\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.forward + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Progress\n            if (_inArray(config.controls, 'progress')) {\n                // Create progress\n                html.push('<span class=\"plyr__progress\">',\n                    '<label for=\"seek{id}\" class=\"plyr__sr-only\">Seek</label>',\n                    '<input id=\"seek{id}\" class=\"plyr__progress--seek\" type=\"range\" min=\"0\" max=\"100\" step=\"0.1\" value=\"0\" data-plyr=\"seek\">',\n                    '<progress class=\"plyr__progress--played\" max=\"100\" value=\"0\" role=\"presentation\"></progress>',\n                    '<progress class=\"plyr__progress--buffer\" max=\"100\" value=\"0\">',\n                        '<span>0</span>% ' + config.i18n.buffered,\n                    '</progress>');\n\n                // Seek tooltip\n                if (config.tooltips.seek) {\n                    html.push('<span class=\"plyr__tooltip\">00:00</span>');\n                }\n\n                // Close\n                html.push('</span>');\n            }\n\n            // Media current time display\n            if (_inArray(config.controls, 'current-time')) {\n                html.push(\n                    '<span class=\"plyr__time\">',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.currentTime + '</span>',\n                        '<span class=\"plyr__time--current\">00:00</span>',\n                    '</span>'\n                );\n            }\n\n            // Media duration display\n            if (_inArray(config.controls, 'duration')) {\n                html.push(\n                    '<span class=\"plyr__time\">',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.duration + '</span>',\n                        '<span class=\"plyr__time--duration\">00:00</span>',\n                    '</span>'\n                );\n            }\n\n            // Toggle mute button\n            if (_inArray(config.controls, 'mute')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"mute\">',\n                        '<svg class=\"icon--muted\"><use xlink:href=\"' + iconPath + '-muted\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath + '-volume\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleMute + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Volume range control\n            if (_inArray(config.controls, 'volume')) {\n                html.push(\n                    '<span class=\"plyr__volume\">',\n                        '<label for=\"volume{id}\" class=\"plyr__sr-only\">' + config.i18n.volume + '</label>',\n                        '<input id=\"volume{id}\" class=\"plyr__volume--input\" type=\"range\" min=\"' + config.volumeMin + '\" max=\"' + config.volumeMax + '\" value=\"' + config.volume + '\" data-plyr=\"volume\">',\n                        '<progress class=\"plyr__volume--display\" max=\"' + config.volumeMax + '\" value=\"' + config.volumeMin + '\" role=\"presentation\"></progress>',\n                    '</span>'\n                );\n            }\n\n            // Toggle captions button\n            if (_inArray(config.controls, 'captions')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"captions\">',\n                        '<svg class=\"icon--captions-on\"><use xlink:href=\"' + iconPath + '-captions-on\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath+ '-captions-off\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleCaptions + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Toggle fullscreen button\n            if (_inArray(config.controls, 'fullscreen')) {\n                html.push(\n                    '<button type=\"button\" data-plyr=\"fullscreen\">',\n                        '<svg class=\"icon--exit-fullscreen\"><use xlink:href=\"' + iconPath + '-exit-fullscreen\" /></svg>',\n                        '<svg><use xlink:href=\"' + iconPath + '-enter-fullscreen\" /></svg>',\n                        '<span class=\"plyr__sr-only\">' + config.i18n.toggleFullscreen + '</span>',\n                    '</button>'\n                );\n            }\n\n            // Close everything\n            html.push('</div>');\n\n            return html.join('');\n        }\n\n        // Setup fullscreen\n        function _setupFullscreen() {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            if ((plyr.type !== 'audio' || config.fullscreen.allowAudio) && config.fullscreen.enabled) {\n                // Check for native support\n                var nativeSupport = fullscreen.supportsFullScreen;\n\n                if (nativeSupport || (config.fullscreen.fallback && !_inFrame())) {\n                    _log((nativeSupport ? 'Native' : 'Fallback') + ' fullscreen enabled');\n\n                    // Add styling hook\n                    _toggleClass(plyr.container, config.classes.fullscreen.enabled, true);\n                } else {\n                    _log('Fullscreen not supported and fallback disabled');\n                }\n\n                // Toggle state\n                if (plyr.buttons && plyr.buttons.fullscreen) {\n                    _toggleState(plyr.buttons.fullscreen, false);\n                }\n\n                // Setup focus trap\n                _focusTrap();\n            }\n        }\n\n        // Setup captions\n        function _setupCaptions() {\n            // Bail if not HTML5 video\n            if (plyr.type !== 'video') {\n                return;\n            }\n\n            // Inject the container\n            if (!_getElement(config.selectors.captions)) {\n                plyr.videoContainer.insertAdjacentHTML('afterbegin', '<div class=\"' + _getClassname(config.selectors.captions) + '\"></div>');\n            }\n\n            // Determine if HTML5 textTracks is supported\n            plyr.usingTextTracks = false;\n            if (plyr.media.textTracks) {\n                plyr.usingTextTracks = true;\n            }\n\n            // Get URL of caption file if exists\n            var captionSrc = '',\n                kind,\n                children = plyr.media.childNodes;\n\n            for (var i = 0; i < children.length; i++) {\n                if (children[i].nodeName.toLowerCase() === 'track') {\n                    kind = children[i].kind;\n                    if (kind === 'captions' || kind === 'subtitles') {\n                        captionSrc = children[i].getAttribute('src');\n                    }\n                }\n            }\n\n            // Record if caption file exists or not\n            plyr.captionExists = true;\n            if (captionSrc === '') {\n                plyr.captionExists = false;\n                _log('No caption track found');\n            } else {\n                _log('Caption track found; URI: ' + captionSrc);\n            }\n\n            // If no caption file exists, hide container for caption text\n            if (!plyr.captionExists) {\n                _toggleClass(plyr.container, config.classes.captions.enabled);\n            } else {\n                // Turn off native caption rendering to avoid double captions\n                // This doesn't seem to work in Safari 7+, so the <track> elements are removed from the dom below\n                var tracks = plyr.media.textTracks;\n                for (var x = 0; x < tracks.length; x++) {\n                    tracks[x].mode = 'hidden';\n                }\n\n                // Enable UI\n                _showCaptions(plyr);\n\n                // Disable unsupported browsers than report false positive\n                // Firefox bug: https://bugzilla.mozilla.org/show_bug.cgi?id=1033144\n                if ((plyr.browser.isIE && plyr.browser.version >= 10) ||\n                    (plyr.browser.isFirefox && plyr.browser.version >= 31)) {\n\n                    // Debugging\n                    _log('Detected browser with known TextTrack issues - using manual fallback');\n\n                    // Set to false so skips to 'manual' captioning\n                    plyr.usingTextTracks = false;\n                }\n\n                // Rendering caption tracks\n                // Native support required - http://caniuse.com/webvtt\n                if (plyr.usingTextTracks) {\n                    _log('TextTracks supported');\n\n                    for (var y = 0; y < tracks.length; y++) {\n                        var track = tracks[y];\n\n                        if (track.kind === 'captions' || track.kind === 'subtitles') {\n                            _on(track, 'cuechange', function() {\n                                // Display a cue, if there is one\n                                if (this.activeCues[0] && 'text' in this.activeCues[0]) {\n                                    _setCaption(this.activeCues[0].getCueAsHTML());\n                                } else {\n                                    _setCaption();\n                                }\n                            });\n                        }\n                    }\n                } else {\n                    // Caption tracks not natively supported\n                    _log('TextTracks not supported so rendering captions manually');\n\n                    // Render captions from array at appropriate time\n                    plyr.currentCaption = '';\n                    plyr.captions = [];\n\n                    if (captionSrc !== '') {\n                        // Create XMLHttpRequest Object\n                        var xhr = new XMLHttpRequest();\n\n                        xhr.onreadystatechange = function() {\n                            if (xhr.readyState === 4) {\n                                if (xhr.status === 200) {\n                                    var captions = [],\n                                        caption,\n                                        req = xhr.responseText;\n\n                                    //According to webvtt spec, line terminator consists of one of the following\n                                    // CRLF (U+000D U+000A), LF (U+000A) or CR (U+000D)\n                                    var lineSeparator = '\\r\\n';\n                                    if(req.indexOf(lineSeparator+lineSeparator) === -1) {\n                                        if(req.indexOf('\\r\\r') !== -1){\n                                            lineSeparator = '\\r';\n                                        } else {\n                                            lineSeparator = '\\n';\n                                        }\n                                    }\n\n                                    captions = req.split(lineSeparator+lineSeparator);\n\n                                    for (var r = 0; r < captions.length; r++) {\n                                        caption = captions[r];\n                                        plyr.captions[r] = [];\n\n                                        // Get the parts of the captions\n                                        var parts = caption.split(lineSeparator),\n                                            index = 0;\n\n                                        // Incase caption numbers are added\n                                        if (parts[index].indexOf(\":\") === -1) {\n                                            index = 1;\n                                        }\n\n                                        plyr.captions[r] = [parts[index], parts[index + 1]];\n                                    }\n\n                                    // Remove first element ('VTT')\n                                    plyr.captions.shift();\n\n                                    _log('Successfully loaded the caption file via AJAX');\n                                } else {\n                                    _warn(config.logPrefix + 'There was a problem loading the caption file via AJAX');\n                                }\n                            }\n                        };\n\n                        xhr.open('get', captionSrc, true);\n\n                        xhr.send();\n                    }\n                }\n            }\n        }\n\n        // Set the current caption\n        function _setCaption(caption) {\n            /* jshint unused:false */\n            var container = _getElement(config.selectors.captions),\n                content = document.createElement('span');\n\n            // Empty the container\n            container.innerHTML = '';\n\n            // Default to empty\n            if (_is.undefined(caption)) {\n                caption = '';\n            }\n\n            // Set the span content\n            if (_is.string(caption)) {\n                content.innerHTML = caption.trim();\n            } else {\n                content.appendChild(caption);\n            }\n\n            // Set new caption text\n            container.appendChild(content);\n\n            // Force redraw (for Safari)\n            var redraw = container.offsetHeight;\n        }\n\n        // Captions functions\n        // Seek the manual caption time and update UI\n        function _seekManualCaptions(time) {\n            // Utilities for caption time codes\n            function _timecodeCommon(tc, pos) {\n                var tcpair = [];\n                tcpair = tc.split(' --> ');\n                for(var i = 0; i < tcpair.length; i++) {\n                    // WebVTT allows for extra meta data after the timestamp line\n                    // So get rid of this if it exists\n                    tcpair[i] = tcpair[i].replace(/(\\d+:\\d+:\\d+\\.\\d+).*/, \"$1\");\n                }\n                return _subTcSecs(tcpair[pos]);\n            }\n            function _timecodeMin(tc) {\n                return _timecodeCommon(tc, 0);\n            }\n            function _timecodeMax(tc) {\n                return _timecodeCommon(tc, 1);\n            }\n            function _subTcSecs(tc) {\n                if (tc === null || tc === undefined) {\n                    return 0;\n                } else {\n                    var tc1 = [],\n                        tc2 = [],\n                        seconds;\n                    tc1 = tc.split(',');\n                    tc2 = tc1[0].split(':');\n                    seconds = Math.floor(tc2[0]*60*60) + Math.floor(tc2[1]*60) + Math.floor(tc2[2]);\n                    return seconds;\n                }\n            }\n\n            // If it's not video, or we're using textTracks, bail.\n            if (plyr.usingTextTracks || plyr.type !== 'video' || !plyr.supported.full) {\n                return;\n            }\n\n            // Reset subcount\n            plyr.subcount = 0;\n\n            // Check time is a number, if not use currentTime\n            // IE has a bug where currentTime doesn't go to 0\n            // https://twitter.com/Sam_Potts/status/573715746506731521\n            time = _is.number(time) ? time : plyr.media.currentTime;\n\n            // If there's no subs available, bail\n            if (!plyr.captions[plyr.subcount]) {\n                return;\n            }\n\n            while (_timecodeMax(plyr.captions[plyr.subcount][0]) < time.toFixed(1)) {\n                plyr.subcount++;\n                if (plyr.subcount > plyr.captions.length - 1) {\n                    plyr.subcount = plyr.captions.length - 1;\n                    break;\n                }\n            }\n\n            // Check if the next caption is in the current time range\n            if (plyr.media.currentTime.toFixed(1) >= _timecodeMin(plyr.captions[plyr.subcount][0]) &&\n                plyr.media.currentTime.toFixed(1) <= _timecodeMax(plyr.captions[plyr.subcount][0])) {\n                    plyr.currentCaption = plyr.captions[plyr.subcount][1];\n\n                // Render the caption\n                _setCaption(plyr.currentCaption);\n            } else {\n                _setCaption();\n            }\n        }\n\n        // Display captions container and button (for initialization)\n        function _showCaptions() {\n            // If there's no caption toggle, bail\n            if (!plyr.buttons.captions) {\n                return;\n            }\n\n            _toggleClass(plyr.container, config.classes.captions.enabled, true);\n\n            // Try to load the value from storage\n            var active = plyr.storage.captionsEnabled;\n\n            // Otherwise fall back to the default config\n            if (!_is.boolean(active)) {\n                active = config.captions.defaultActive;\n            }\n\n            if (active) {\n                _toggleClass(plyr.container, config.classes.captions.active, true);\n                _toggleState(plyr.buttons.captions, true);\n            }\n        }\n\n        // Find all elements\n        function _getElements(selector) {\n            return plyr.container.querySelectorAll(selector);\n        }\n\n        // Find a single element\n        function _getElement(selector) {\n            return _getElements(selector)[0];\n        }\n\n        // Determine if we're in an iframe\n        function _inFrame() {\n            try {\n                return window.self !== window.top;\n            }\n            catch (e) {\n                return true;\n            }\n        }\n\n        // Trap focus inside container\n        function _focusTrap() {\n            var tabbables   = _getElements('input:not([disabled]), button:not([disabled])'),\n                first       = tabbables[0],\n                last        = tabbables[tabbables.length - 1];\n\n            function _checkFocus(event) {\n                // If it is TAB\n                if (event.which === 9 && plyr.isFullscreen) {\n                    if (event.target === last && !event.shiftKey) {\n                        // Move focus to first element that can be tabbed if Shift isn't used\n                        event.preventDefault();\n                        first.focus();\n                    } else if (event.target === first && event.shiftKey) {\n                        // Move focus to last element that can be tabbed if Shift is used\n                        event.preventDefault();\n                        last.focus();\n                    }\n                }\n            }\n\n            // Bind the handler\n            _on(plyr.container, 'keydown', _checkFocus);\n        }\n\n        // Add elements to HTML5 media (source, tracks, etc)\n        function _insertChildElements(type, attributes) {\n            if (_is.string(attributes)) {\n               _insertElement(type, plyr.media, { src: attributes });\n            } else if (attributes.constructor === Array) {\n                for (var i = attributes.length - 1; i >= 0; i--) {\n                    _insertElement(type, plyr.media, attributes[i]);\n                }\n            }\n        }\n\n        // Insert controls\n        function _injectControls() {\n            // Sprite\n            if (config.loadSprite) {\n                var iconUrl = _getIconUrl();\n\n                // Only load external sprite using AJAX\n                if (iconUrl.absolute) {\n                    _log('AJAX loading absolute SVG sprite' + (plyr.browser.isIE ? ' (due to IE)' : ''));\n                    loadSprite(iconUrl.url, \"sprite-plyr\");\n                } else {\n                    _log('Sprite will be used as external resource directly');\n                }\n            }\n\n            // Make a copy of the html\n            var html = config.html;\n\n            // Insert custom video controls\n            _log('Injecting custom controls');\n\n            // If no controls are specified, create default\n            if (!html) {\n                html = _buildControls();\n            }\n\n            // Replace seek time instances\n            html = _replaceAll(html, '{seektime}', config.seekTime);\n\n            // Replace all id references with random numbers\n            html = _replaceAll(html, '{id}', Math.floor(Math.random() * (10000)));\n\n            // Controls container\n            var target;\n\n            // Inject to custom location\n            if (_is.string(config.selectors.controls.container)) {\n                target = document.querySelector(config.selectors.controls.container);\n            }\n\n            // Inject into the container by default\n            if (!_is.htmlElement(target)) {\n                target = plyr.container\n            }\n\n            // Inject controls HTML\n            target.insertAdjacentHTML('beforeend', html);\n\n            // Setup tooltips\n            if (config.tooltips.controls) {\n                var labels = _getElements([config.selectors.controls.wrapper, ' ', config.selectors.labels, ' .', config.classes.hidden].join(''));\n\n                for (var i = labels.length - 1; i >= 0; i--) {\n                    var label = labels[i];\n\n                    _toggleClass(label, config.classes.hidden, false);\n                    _toggleClass(label, config.classes.tooltip, true);\n                }\n            }\n        }\n\n        // Find the UI controls and store references\n        function _findElements() {\n            try {\n                plyr.controls                 = _getElement(config.selectors.controls.wrapper);\n\n                // Buttons\n                plyr.buttons = {};\n                plyr.buttons.seek             = _getElement(config.selectors.buttons.seek);\n                plyr.buttons.play             = _getElements(config.selectors.buttons.play);\n                plyr.buttons.pause            = _getElement(config.selectors.buttons.pause);\n                plyr.buttons.restart          = _getElement(config.selectors.buttons.restart);\n                plyr.buttons.rewind           = _getElement(config.selectors.buttons.rewind);\n                plyr.buttons.forward          = _getElement(config.selectors.buttons.forward);\n                plyr.buttons.fullscreen       = _getElement(config.selectors.buttons.fullscreen);\n\n                // Inputs\n                plyr.buttons.mute             = _getElement(config.selectors.buttons.mute);\n                plyr.buttons.captions         = _getElement(config.selectors.buttons.captions);\n\n                // Progress\n                plyr.progress = {};\n                plyr.progress.container       = _getElement(config.selectors.progress.container);\n\n                // Progress - Buffering\n                plyr.progress.buffer          = {};\n                plyr.progress.buffer.bar      = _getElement(config.selectors.progress.buffer);\n                plyr.progress.buffer.text     = plyr.progress.buffer.bar && plyr.progress.buffer.bar.getElementsByTagName('span')[0];\n\n                // Progress - Played\n                plyr.progress.played          = _getElement(config.selectors.progress.played);\n\n                // Seek tooltip\n                plyr.progress.tooltip         = plyr.progress.container && plyr.progress.container.querySelector('.' + config.classes.tooltip);\n\n                // Volume\n                plyr.volume                   = {};\n                plyr.volume.input             = _getElement(config.selectors.volume.input);\n                plyr.volume.display           = _getElement(config.selectors.volume.display);\n\n                // Timing\n                plyr.duration                 = _getElement(config.selectors.duration);\n                plyr.currentTime              = _getElement(config.selectors.currentTime);\n                plyr.seekTime                 = _getElements(config.selectors.seekTime);\n\n                return true;\n            }\n            catch(e) {\n                _warn('It looks like there is a problem with your controls HTML');\n\n                // Restore native video controls\n                _toggleNativeControls(true);\n\n                return false;\n            }\n        }\n\n        // Toggle style hook\n        function _toggleStyleHook() {\n            _toggleClass(plyr.container, config.selectors.container.replace('.', ''), plyr.supported.full);\n        }\n\n        // Toggle native controls\n        function _toggleNativeControls(toggle) {\n            if (toggle && _inArray(config.types.html5, plyr.type)) {\n                plyr.media.setAttribute('controls', '');\n            } else {\n                plyr.media.removeAttribute('controls');\n            }\n        }\n\n        // Setup aria attribute for play and iframe title\n        function _setTitle(iframe) {\n            // Find the current text\n            var label = config.i18n.play;\n\n            // If there's a media title set, use that for the label\n            if (_is.string(config.title) && config.title.length) {\n                label += ', ' + config.title;\n\n                // Set container label\n                plyr.container.setAttribute('aria-label', config.title);\n            }\n\n            // If there's a play button, set label\n            if (plyr.supported.full && plyr.buttons.play) {\n                for (var i = plyr.buttons.play.length - 1; i >= 0; i--) {\n                    plyr.buttons.play[i].setAttribute('aria-label', label);\n                }\n            }\n\n            // Set iframe title\n            // https://github.com/Selz/plyr/issues/124\n            if (_is.htmlElement(iframe)) {\n                iframe.setAttribute('title', config.i18n.frameTitle.replace('{title}', config.title));\n            }\n        }\n\n        // Setup localStorage\n        function _setupStorage() {\n            var value = null;\n            plyr.storage = {};\n\n            // Bail if we don't have localStorage support or it's disabled\n            if (!_storage.supported || !config.storage.enabled) {\n                return;\n            }\n\n            // Clean up old volume\n            // https://github.com/Selz/plyr/issues/171\n            window.localStorage.removeItem('plyr-volume');\n\n            // load value from the current key\n            value = window.localStorage.getItem(config.storage.key);\n\n            if (!value) {\n                // Key wasn't set (or had been cleared), move along\n                return;\n            } else if (/^\\d+(\\.\\d+)?$/.test(value)) {\n                // If value is a number, it's probably volume from an older\n                // version of plyr. See: https://github.com/Selz/plyr/pull/313\n                // Update the key to be JSON\n                _updateStorage({volume: parseFloat(value)});\n            } else {\n                // Assume it's JSON from this or a later version of plyr\n                plyr.storage = JSON.parse(value);\n            }\n        }\n\n        // Save a value back to local storage\n        function _updateStorage(value) {\n            // Bail if we don't have localStorage support or it's disabled\n            if (!_storage.supported || !config.storage.enabled) {\n                return;\n            }\n\n            // Update the working copy of the values\n            _extend(plyr.storage, value);\n\n            // Update storage\n            window.localStorage.setItem(config.storage.key, JSON.stringify(plyr.storage));\n        }\n\n        // Setup media\n        function _setupMedia() {\n            // If there's no media, bail\n            if (!plyr.media) {\n                _warn('No media element found!');\n                return;\n            }\n\n            if (plyr.supported.full) {\n                // Add type class\n                _toggleClass(plyr.container, config.classes.type.replace('{0}', plyr.type), true);\n\n                // Add video class for embeds\n                // This will require changes if audio embeds are added\n                if (_inArray(config.types.embed, plyr.type)) {\n                    _toggleClass(plyr.container, config.classes.type.replace('{0}', 'video'), true);\n                }\n\n                // If there's no autoplay attribute, assume the video is stopped and add state class\n                _toggleClass(plyr.container, config.classes.stopped, config.autoplay);\n\n                // Add iOS class\n                _toggleClass(plyr.ontainer, config.classes.isIos, plyr.browser.isIos);\n\n                // Add touch class\n                _toggleClass(plyr.container, config.classes.isTouch, plyr.browser.isTouch);\n\n                // Inject the player wrapper\n                if (plyr.type === 'video') {\n                    // Create the wrapper div\n                    var wrapper = document.createElement('div');\n                    wrapper.setAttribute('class', config.classes.videoWrapper);\n\n                    // Wrap the video in a container\n                    _wrap(plyr.media, wrapper);\n\n                    // Cache the container\n                    plyr.videoContainer = wrapper;\n                }\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                _setupEmbed();\n            }\n        }\n\n        // Setup YouTube/Vimeo\n        function _setupEmbed() {\n            var container = document.createElement('div'),\n                mediaId,\n                id = plyr.type + '-' + Math.floor(Math.random() * (10000));\n\n            // Parse IDs from URLs if supplied\n            switch (plyr.type) {\n                case 'youtube':\n                    mediaId = _parseYouTubeId(plyr.embedId);\n                    break;\n\n                case 'vimeo':\n                    mediaId = _parseVimeoId(plyr.embedId);\n                    break;\n\n                default:\n                    mediaId = plyr.embedId;\n            }\n\n            // Remove old containers\n            var containers = _getElements('[id^=\"' + plyr.type + '-\"]');\n            for (var i = containers.length - 1; i >= 0; i--) {\n                _remove(containers[i]);\n            }\n\n            // Add embed class for responsive\n            _toggleClass(plyr.media, config.classes.videoWrapper, true);\n            _toggleClass(plyr.media, config.classes.embedWrapper, true);\n\n            if (plyr.type === 'youtube') {\n                // Create the YouTube container\n                plyr.media.appendChild(container);\n\n                // Set ID\n                container.setAttribute('id', id);\n\n                // Setup API\n                if (_is.object(window.YT)) {\n                    _youTubeReady(mediaId, container);\n                } else {\n                    // Load the API\n                    _injectScript(config.urls.youtube.api);\n\n                    // Setup callback for the API\n                    window.onYouTubeReadyCallbacks = window.onYouTubeReadyCallbacks || [];\n\n                    // Add to queue\n                    window.onYouTubeReadyCallbacks.push(function() { _youTubeReady(mediaId, container); });\n\n                    // Set callback to process queue\n                    window.onYouTubeIframeAPIReady = function () {\n                        window.onYouTubeReadyCallbacks.forEach(function(callback) { callback(); });\n                    };\n                }\n            } else if (plyr.type === 'vimeo') {\n                // Vimeo needs an extra div to hide controls on desktop (which has full support)\n                if (plyr.supported.full) {\n                    plyr.media.appendChild(container);\n                } else {\n                    container = plyr.media;\n                }\n\n                // Set ID\n                container.setAttribute('id', id);\n\n                // Load the API if not already\n                if (!_is.object(window.Vimeo)) {\n                    _injectScript(config.urls.vimeo.api);\n\n                    // Wait for fragaloop load\n                    var vimeoTimer = window.setInterval(function() {\n                        if (_is.object(window.Vimeo)) {\n                            window.clearInterval(vimeoTimer);\n                            _vimeoReady(mediaId, container);\n                        }\n                    }, 50);\n                } else {\n                    _vimeoReady(mediaId, container);\n                }\n            } else if (plyr.type === 'soundcloud') {\n                // TODO: Currently unsupported and undocumented\n                // Inject the iframe\n                var soundCloud = document.createElement('iframe');\n\n                // Watch for iframe load\n                soundCloud.loaded = false;\n                _on(soundCloud, 'load', function() { soundCloud.loaded = true; });\n\n                _setAttributes(soundCloud, {\n                    'src':  'https://w.soundcloud.com/player/?url=https://api.soundcloud.com/tracks/' + mediaId,\n                    'id':   id\n                });\n\n                container.appendChild(soundCloud);\n                plyr.media.appendChild(container);\n\n                // Load the API if not already\n                if (!window.SC) {\n                    _injectScript(config.urls.soundcloud.api);\n                }\n\n                // Wait for SC load\n                var soundCloudTimer = window.setInterval(function() {\n                    if (window.SC && soundCloud.loaded) {\n                        window.clearInterval(soundCloudTimer);\n                        _soundcloudReady.call(soundCloud);\n                    }\n                }, 50);\n            }\n        }\n\n        // When embeds are ready\n        function _embedReady() {\n            // Setup the UI and call ready if full support\n            if (plyr.supported.full) {\n                _setupInterface();\n                _ready();\n            }\n\n            // Set title\n            _setTitle(_getElement('iframe'));\n        }\n\n        // Handle YouTube API ready\n        function _youTubeReady(videoId, container) {\n            // Setup instance\n            // https://developers.google.com/youtube/iframe_api_reference\n            plyr.embed = new window.YT.Player(container.id, {\n                videoId: videoId,\n                playerVars: {\n                    autoplay:       (config.autoplay ? 1 : 0),\n                    controls:       (plyr.supported.full ? 0 : 1),\n                    rel:            0,\n                    showinfo:       0,\n                    iv_load_policy: 3,\n                    cc_load_policy: (config.captions.defaultActive ? 1 : 0),\n                    cc_lang_pref:   'en',\n                    wmode:          'transparent',\n                    modestbranding: 1,\n                    disablekb:      1,\n                    origin:         '*' // https://code.google.com/p/gdata-issues/issues/detail?id=5788#c45\n                },\n                events: {\n                    'onError': function(event) {\n                        _triggerEvent(plyr.container, 'error', true, {\n                            code:   event.data,\n                            embed:  event.target\n                        });\n                    },\n                    'onReady': function(event) {\n                        // Get the instance\n                        var instance = event.target;\n\n                        // Create a faux HTML5 API using the YouTube API\n                        plyr.media.play = function() {\n                            instance.playVideo();\n                            plyr.media.paused = false;\n                        };\n                        plyr.media.pause = function() {\n                            instance.pauseVideo();\n                            plyr.media.paused = true;\n                        };\n                        plyr.media.stop = function() {\n                            instance.stopVideo();\n                            plyr.media.paused = true;\n                        };\n                        plyr.media.duration = instance.getDuration();\n                        plyr.media.paused = true;\n                        plyr.media.currentTime = 0;\n                        plyr.media.muted = instance.isMuted();\n\n                        // Set title\n                        config.title = instance.getVideoData().title;\n\n                        // Set the tabindex\n                        if (plyr.supported.full) {\n                            plyr.media.querySelector('iframe').setAttribute('tabindex', '-1');\n                        }\n\n                        // Update UI\n                        _embedReady();\n\n                        // Trigger timeupdate\n                        _triggerEvent(plyr.media, 'timeupdate');\n\n                        // Trigger timeupdate\n                        _triggerEvent(plyr.media, 'durationchange');\n\n                        // Reset timer\n                        window.clearInterval(timers.buffering);\n\n                        // Setup buffering\n                        timers.buffering = window.setInterval(function() {\n                            // Get loaded % from YouTube\n                            plyr.media.buffered = instance.getVideoLoadedFraction();\n\n                            // Trigger progress only when we actually buffer something\n                            if (plyr.media.lastBuffered === null || plyr.media.lastBuffered < plyr.media.buffered) {\n                                _triggerEvent(plyr.media, 'progress');\n                            }\n\n                            // Set last buffer point\n                            plyr.media.lastBuffered = plyr.media.buffered;\n\n                            // Bail if we're at 100%\n                            if (plyr.media.buffered === 1) {\n                                window.clearInterval(timers.buffering);\n\n                                // Trigger event\n                                _triggerEvent(plyr.media, 'canplaythrough');\n                            }\n                        }, 200);\n                    },\n                    'onStateChange': function(event) {\n                        // Get the instance\n                        var instance = event.target;\n\n                        // Reset timer\n                        window.clearInterval(timers.playing);\n\n                        // Handle events\n                        // -1   Unstarted\n                        // 0    Ended\n                        // 1    Playing\n                        // 2    Paused\n                        // 3    Buffering\n                        // 5    Video cued\n                        switch (event.data) {\n                            case 0:\n                                plyr.media.paused = true;\n                                _triggerEvent(plyr.media, 'ended');\n                                break;\n\n                            case 1:\n                                plyr.media.paused = false;\n\n                                // If we were seeking, fire seeked event\n                                if (plyr.media.seeking) {\n                                    _triggerEvent(plyr.media, 'seeked');\n                                }\n\n                                plyr.media.seeking = false;\n                                _triggerEvent(plyr.media, 'play');\n                                _triggerEvent(plyr.media, 'playing');\n\n                                // Poll to get playback progress\n                                timers.playing = window.setInterval(function() {\n                                    // Set the current time\n                                    plyr.media.currentTime = instance.getCurrentTime();\n\n                                    // Trigger timeupdate\n                                    _triggerEvent(plyr.media, 'timeupdate');\n                                }, 100);\n\n                                // Check duration again due to YouTube bug\n                                // https://github.com/Selz/plyr/issues/374\n                                // https://code.google.com/p/gdata-issues/issues/detail?id=8690\n                                if (plyr.media.duration !== instance.getDuration()) {\n                                    plyr.media.duration = instance.getDuration();\n                                    _triggerEvent(plyr.media, 'durationchange');\n                                }\n\n                                break;\n\n                            case 2:\n                                plyr.media.paused = true;\n                                _triggerEvent(plyr.media, 'pause');\n                                break;\n                        }\n\n                        _triggerEvent(plyr.container, 'statechange', false, {\n                            code: event.data\n                        });\n                    }\n                }\n            });\n        }\n\n        // Vimeo ready\n        function _vimeoReady(mediaId, container) {\n            // Setup instance\n            // https://github.com/vimeo/player.js\n            plyr.embed = new window.Vimeo.Player(container, {\n                id:         parseInt(mediaId),\n                loop:       config.loop,\n                autoplay:   config.autoplay,\n                byline:     false,\n                portrait:   false,\n                title:      false\n            });\n\n            // Create a faux HTML5 API using the Vimeo API\n            plyr.media.play = function() {\n                plyr.embed.play();\n                plyr.media.paused = false;\n            };\n            plyr.media.pause = function() {\n                plyr.embed.pause();\n                plyr.media.paused = true;\n            };\n            plyr.media.stop = function() {\n                plyr.embed.stop();\n                plyr.media.paused = true;\n            };\n\n            plyr.media.paused = true;\n            plyr.media.currentTime = 0;\n\n            // Update UI\n            _embedReady();\n\n            plyr.embed.getCurrentTime().then(function(value) {\n                plyr.media.currentTime = value;\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'timeupdate');\n            });\n\n            plyr.embed.getDuration().then(function(value) {\n                plyr.media.duration = value;\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'durationchange');\n            });\n\n            // TODO: Captions\n            /*if (config.captions.defaultActive) {\n                plyr.embed.enableTextTrack('en');\n            }*/\n\n            plyr.embed.on('loaded', function() {\n                // Fix keyboard focus issues\n                // https://github.com/Selz/plyr/issues/317\n                if (_is.htmlElement(plyr.embed.element) && plyr.supported.full) {\n                    plyr.embed.element.setAttribute('tabindex', '-1');\n                }\n            });\n\n            plyr.embed.on('play', function() {\n                plyr.media.paused = false;\n                _triggerEvent(plyr.media, 'play');\n                _triggerEvent(plyr.media, 'playing');\n            });\n\n            plyr.embed.on('pause', function() {\n                plyr.media.paused = true;\n                _triggerEvent(plyr.media, 'pause');\n            });\n\n            plyr.embed.on('timeupdate', function(data) {\n                plyr.media.seeking = false;\n                plyr.media.currentTime = data.seconds;\n                _triggerEvent(plyr.media, 'timeupdate');\n            });\n\n            plyr.embed.on('progress', function(data) {\n                plyr.media.buffered = data.percent;\n                _triggerEvent(plyr.media, 'progress');\n\n                if (parseInt(data.percent) === 1) {\n                    // Trigger event\n                    _triggerEvent(plyr.media, 'canplaythrough');\n                }\n            });\n\n            plyr.embed.on('seeked', function() {\n                plyr.media.seeking = false;\n                _triggerEvent(plyr.media, 'seeked');\n                _triggerEvent(plyr.media, 'play');\n            });\n\n            plyr.embed.on('ended', function() {\n                plyr.media.paused = true;\n                _triggerEvent(plyr.media, 'ended');\n            });\n        }\n\n        // Soundcloud ready\n        function _soundcloudReady() {\n            /* jshint validthis: true */\n            plyr.embed = window.SC.Widget(this);\n\n            // Setup on ready\n            plyr.embed.bind(window.SC.Widget.Events.READY, function() {\n                // Create a faux HTML5 API using the Soundcloud API\n                plyr.media.play = function() {\n                    plyr.embed.play();\n                    plyr.media.paused = false;\n                };\n                plyr.media.pause = function() {\n                    plyr.embed.pause();\n                    plyr.media.paused = true;\n                };\n                plyr.media.stop = function() {\n                    plyr.embed.seekTo(0);\n                    plyr.embed.pause();\n                    plyr.media.paused = true;\n                };\n\n                plyr.media.paused = true;\n                plyr.media.currentTime = 0;\n\n                plyr.embed.getDuration(function(value) {\n                    plyr.media.duration = value/1000;\n\n                    // Update UI\n                    _embedReady();\n                });\n\n                plyr.embed.getPosition(function(value) {\n                    plyr.media.currentTime = value;\n\n                    // Trigger timeupdate\n                    _triggerEvent(plyr.media, 'timeupdate');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PLAY, function() {\n                    plyr.media.paused = false;\n                    _triggerEvent(plyr.media, 'play');\n                    _triggerEvent(plyr.media, 'playing');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PAUSE, function() {\n                    plyr.media.paused = true;\n                    _triggerEvent(plyr.media, 'pause');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.PLAY_PROGRESS, function(data) {\n                    plyr.media.seeking = false;\n                    plyr.media.currentTime = data.currentPosition/1000;\n                    _triggerEvent(plyr.media, 'timeupdate');\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.LOAD_PROGRESS, function(data) {\n                    plyr.media.buffered = data.loadProgress;\n                    _triggerEvent(plyr.media, 'progress');\n\n                    if (parseInt(data.loadProgress) === 1) {\n                        // Trigger event\n                        _triggerEvent(plyr.media, 'canplaythrough');\n                    }\n                });\n\n                plyr.embed.bind(window.SC.Widget.Events.FINISH, function() {\n                    plyr.media.paused = true;\n                    _triggerEvent(plyr.media, 'ended');\n                });\n            });\n        }\n\n        // Play media\n        function _play() {\n            if ('play' in plyr.media) {\n                plyr.media.play();\n            }\n        }\n\n        // Pause media\n        function _pause() {\n            if ('pause' in plyr.media) {\n                plyr.media.pause();\n            }\n        }\n\n        // Toggle playback\n        function _togglePlay(toggle) {\n            // True toggle\n            if (!_is.boolean(toggle)) {\n                toggle = plyr.media.paused;\n            }\n\n            if (toggle) {\n                _play();\n            } else {\n                _pause();\n            }\n\n            return toggle;\n        }\n\n        // Rewind\n        function _rewind(seekTime) {\n            // Use default if needed\n            if (!_is.number(seekTime)) {\n                seekTime = config.seekTime;\n            }\n            _seek(plyr.media.currentTime - seekTime);\n        }\n\n        // Fast forward\n        function _forward(seekTime) {\n            // Use default if needed\n            if (!_is.number(seekTime)) {\n                seekTime = config.seekTime;\n            }\n            _seek(plyr.media.currentTime + seekTime);\n        }\n\n        // Seek to time\n        // The input parameter can be an event or a number\n        function _seek(input) {\n            var targetTime  = 0,\n                paused      = plyr.media.paused,\n                duration    = _getDuration();\n\n            if (_is.number(input)) {\n                targetTime = input;\n            } else if (_is.object(input) && _inArray(['input', 'change'], input.type)) {\n                // It's the seek slider\n                // Seek to the selected time\n                targetTime = ((input.target.value / input.target.max) * duration);\n            }\n\n            // Normalise targetTime\n            if (targetTime < 0) {\n                targetTime = 0;\n            } else if (targetTime > duration) {\n                targetTime = duration;\n            }\n\n            // Update seek range and progress\n            _updateSeekDisplay(targetTime);\n\n            // Set the current time\n            // Try/catch incase the media isn't set and we're calling seek() from source() and IE moans\n            try {\n                plyr.media.currentTime = targetTime.toFixed(4);\n            }\n            catch(e) {}\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed.seekTo(targetTime);\n                        break;\n\n                    case 'vimeo':\n                        // Round to nearest second for vimeo\n                        plyr.embed.setCurrentTime(targetTime.toFixed(0));\n                        break;\n\n                    case 'soundcloud':\n                        plyr.embed.seekTo(targetTime * 1000);\n                        break;\n                }\n\n                if (paused) {\n                    _pause();\n                }\n\n                // Trigger timeupdate\n                _triggerEvent(plyr.media, 'timeupdate');\n\n                // Set seeking flag\n                plyr.media.seeking = true;\n\n                // Trigger seeking\n                _triggerEvent(plyr.media, 'seeking');\n            }\n\n            // Logging\n            _log('Seeking to ' + plyr.media.currentTime + ' seconds');\n\n            // Special handling for 'manual' captions\n            _seekManualCaptions(targetTime);\n        }\n\n        // Get the duration (or custom if set)\n        function _getDuration() {\n            // It should be a number, but parse it just incase\n            var duration = parseInt(config.duration),\n\n            // True duration\n            mediaDuration = 0;\n\n            // Only if duration available\n            if (plyr.media.duration !== null && !isNaN(plyr.media.duration)) {\n                mediaDuration = plyr.media.duration;\n            }\n\n            // If custom duration is funky, use regular duration\n            return (isNaN(duration) ? mediaDuration : duration);\n        }\n\n        // Check playing state\n        function _checkPlaying() {\n            _toggleClass(plyr.container, config.classes.playing, !plyr.media.paused);\n\n            _toggleClass(plyr.container, config.classes.stopped, plyr.media.paused);\n\n            _toggleControls(plyr.media.paused);\n        }\n\n        // Save scroll position\n        function _saveScrollPosition() {\n            scroll = {\n                x: window.pageXOffset || 0,\n                y: window.pageYOffset || 0\n            };\n        }\n\n        // Restore scroll position\n        function _restoreScrollPosition() {\n            window.scrollTo(scroll.x, scroll.y);\n        }\n\n        // Toggle fullscreen\n        function _toggleFullscreen(event) {\n            // Check for native support\n            var nativeSupport = fullscreen.supportsFullScreen;\n\n            if (nativeSupport) {\n                // If it's a fullscreen change event, update the UI\n                if (event && event.type === fullscreen.fullScreenEventName) {\n                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n                } else {\n                    // Else it's a user request to enter or exit\n                    if (!fullscreen.isFullScreen(plyr.container)) {\n                        // Save scroll position\n                        _saveScrollPosition();\n\n                        // Request full screen\n                        fullscreen.requestFullScreen(plyr.container);\n                    } else {\n                        // Bail from fullscreen\n                        fullscreen.cancelFullScreen();\n                    }\n\n                    // Check if we're actually full screen (it could fail)\n                    plyr.isFullscreen = fullscreen.isFullScreen(plyr.container);\n\n                    return;\n                }\n            } else {\n                // Otherwise, it's a simple toggle\n                plyr.isFullscreen = !plyr.isFullscreen;\n\n                // Bind/unbind escape key\n                document.body.style.overflow = plyr.isFullscreen ? 'hidden' : '';\n            }\n\n            // Set class hook\n            _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n\n            // Trap focus\n            _focusTrap(plyr.isFullscreen);\n\n            // Set button state\n            if (plyr.buttons && plyr.buttons.fullscreen) {\n                _toggleState(plyr.buttons.fullscreen, plyr.isFullscreen);\n            }\n\n            // Trigger an event\n            _triggerEvent(plyr.container, plyr.isFullscreen ? 'enterfullscreen' : 'exitfullscreen', true);\n\n            // Restore scroll position\n            if (!plyr.isFullscreen && nativeSupport) {\n                _restoreScrollPosition();\n            }\n        }\n\n        // Mute\n        function _toggleMute(muted) {\n            // If the method is called without parameter, toggle based on current value\n            if (!_is.boolean(muted)) {\n                muted = !plyr.media.muted;\n            }\n\n            // Set button state\n            _toggleState(plyr.buttons.mute, muted);\n\n            // Set mute on the player\n            plyr.media.muted = muted;\n\n            // If volume is 0 after unmuting, set to default\n            if (plyr.media.volume === 0) {\n                _setVolume(config.volume);\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                // YouTube\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed[plyr.media.muted ? 'mute' : 'unMute']();\n                        break;\n\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.embed.setVolume(plyr.media.muted ? 0 : parseFloat(config.volume / config.volumeMax));\n                        break;\n                }\n\n                // Trigger volumechange for embeds\n                _triggerEvent(plyr.media, 'volumechange');\n            }\n        }\n\n        // Set volume\n        function _setVolume(volume) {\n            var max = config.volumeMax,\n                min = config.volumeMin;\n\n            // Load volume from storage if no value specified\n            if (_is.undefined(volume)) {\n                volume = plyr.storage.volume;\n            }\n\n            // Use config if all else fails\n            if (volume === null || isNaN(volume)) {\n                volume = config.volume;\n            }\n\n            // Maximum is volumeMax\n            if (volume > max) {\n                volume = max;\n            }\n            // Minimum is volumeMin\n            if (volume < min) {\n                volume = min;\n            }\n\n            // Set the player volume\n            plyr.media.volume = parseFloat(volume / max);\n\n            // Set the display\n            if (plyr.volume.display) {\n                plyr.volume.display.value = volume;\n            }\n\n            // Embeds\n            if (_inArray(config.types.embed, plyr.type)) {\n                switch(plyr.type) {\n                    case 'youtube':\n                        plyr.embed.setVolume(plyr.media.volume * 100);\n                        break;\n\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.embed.setVolume(plyr.media.volume);\n                        break;\n                }\n\n                // Trigger volumechange for embeds\n                _triggerEvent(plyr.media, 'volumechange');\n            }\n\n            // Toggle muted state\n            if (volume === 0) {\n                plyr.media.muted = true;\n            } else if (plyr.media.muted && volume > 0) {\n                _toggleMute();\n            }\n        }\n\n        // Increase volume\n        function _increaseVolume(step) {\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            if (!_is.number(step)) {\n                step = config.volumeStep;\n            }\n\n            _setVolume(volume + step);\n        }\n\n        // Decrease volume\n        function _decreaseVolume(step) {\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            if (!_is.number(step)) {\n                step = config.volumeStep;\n            }\n\n            _setVolume(volume - step);\n        }\n\n        // Update volume UI and storage\n        function _updateVolume() {\n            // Get the current volume\n            var volume = plyr.media.muted ? 0 : (plyr.media.volume * config.volumeMax);\n\n            // Update the <input type=\"range\"> if present\n            if (plyr.supported.full) {\n                if (plyr.volume.input) {\n                    plyr.volume.input.value = volume;\n                }\n                if (plyr.volume.display) {\n                    plyr.volume.display.value = volume;\n                }\n            }\n\n            // Update the volume in storage\n            _updateStorage({volume: volume});\n\n            // Toggle class if muted\n            _toggleClass(plyr.container, config.classes.muted, (volume === 0));\n\n            // Update checkbox for mute state\n            if (plyr.supported.full && plyr.buttons.mute) {\n                _toggleState(plyr.buttons.mute, (volume === 0));\n            }\n        }\n\n        // Toggle captions\n        function _toggleCaptions(show) {\n            // If there's no full support, or there's no caption toggle\n            if (!plyr.supported.full || !plyr.buttons.captions) {\n                return;\n            }\n\n            // If the method is called without parameter, toggle based on current value\n            if (!_is.boolean(show)) {\n                show = (plyr.container.className.indexOf(config.classes.captions.active) === -1);\n            }\n\n            // Set global\n            plyr.captionsEnabled = show;\n\n            // Toggle state\n            _toggleState(plyr.buttons.captions, plyr.captionsEnabled);\n\n            // Add class hook\n            _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n\n            // Trigger an event\n            _triggerEvent(plyr.container, plyr.captionsEnabled ? 'captionsenabled' : 'captionsdisabled', true);\n\n            // Save captions state to localStorage\n            _updateStorage({captionsEnabled: plyr.captionsEnabled});\n        }\n\n        // Check if media is loading\n        function _checkLoading(event) {\n            var loading = (event.type === 'waiting');\n\n            // Clear timer\n            clearTimeout(timers.loading);\n\n            // Timer to prevent flicker when seeking\n            timers.loading = setTimeout(function() {\n                // Toggle container class hook\n                _toggleClass(plyr.container, config.classes.loading, loading);\n\n                // Show controls if loading, hide if done\n                _toggleControls(loading);\n            }, (loading ? 250 : 0));\n        }\n\n        // Update <progress> elements\n        function _updateProgress(event) {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            var progress    = plyr.progress.played,\n                value       = 0,\n                duration    = _getDuration();\n\n            if (event) {\n                switch (event.type) {\n                    // Video playing\n                    case 'timeupdate':\n                    case 'seeking':\n                        if (plyr.controls.pressed) {\n                            return;\n                        }\n\n                        value = _getPercentage(plyr.media.currentTime, duration);\n\n                        // Set seek range value only if it's a 'natural' time event\n                        if (event.type === 'timeupdate' && plyr.buttons.seek) {\n                            plyr.buttons.seek.value = value;\n                        }\n\n                        break;\n\n                    // Check buffer status\n                    case 'playing':\n                    case 'progress':\n                        progress    = plyr.progress.buffer;\n                        value       = (function() {\n                            var buffered = plyr.media.buffered;\n\n                            if (buffered && buffered.length) {\n                                // HTML5\n                                return _getPercentage(buffered.end(0), duration);\n                            } else if (_is.number(buffered)) {\n                                // YouTube returns between 0 and 1\n                                return (buffered * 100);\n                            }\n\n                            return 0;\n                        })();\n\n                        break;\n                }\n            }\n\n            // Set values\n            _setProgress(progress, value);\n        }\n\n        // Set <progress> value\n        function _setProgress(progress, value) {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            // Default to 0\n            if (_is.undefined(value)) {\n                value = 0;\n            }\n            // Default to buffer or bail\n            if (_is.undefined(progress)) {\n                if (plyr.progress && plyr.progress.buffer) {\n                    progress = plyr.progress.buffer;\n                } else {\n                    return;\n                }\n            }\n\n            // One progress element passed\n            if (_is.htmlElement(progress)) {\n                progress.value = value;\n            } else if (progress) {\n                // Object of progress + text element\n                if (progress.bar) {\n                    progress.bar.value = value;\n                }\n                if (progress.text) {\n                    progress.text.innerHTML = value;\n                }\n            }\n        }\n\n        // Update the displayed time\n        function _updateTimeDisplay(time, element) {\n            // Bail if there's no duration display\n            if (!element) {\n                return;\n            }\n\n            // Fallback to 0\n            if (isNaN(time)) {\n                time = 0;\n            }\n\n            plyr.secs = parseInt(time % 60);\n            plyr.mins = parseInt((time / 60) % 60);\n            plyr.hours = parseInt(((time / 60) / 60) % 60);\n\n            // Do we need to display hours?\n            var displayHours = (parseInt(((_getDuration() / 60) / 60) % 60) > 0);\n\n            // Ensure it's two digits. For example, 03 rather than 3.\n            plyr.secs = ('0' + plyr.secs).slice(-2);\n            plyr.mins = ('0' + plyr.mins).slice(-2);\n\n            // Render\n            element.innerHTML = (displayHours ? plyr.hours + ':' : '') + plyr.mins + ':' + plyr.secs;\n        }\n\n        // Show the duration on metadataloaded\n        function _displayDuration() {\n            if (!plyr.supported.full) {\n                return;\n            }\n\n            // Determine duration\n            var duration = _getDuration() || 0;\n\n            // If there's only one time display, display duration there\n            if (!plyr.duration && config.displayDuration && plyr.media.paused) {\n                _updateTimeDisplay(duration, plyr.currentTime);\n            }\n\n            // If there's a duration element, update content\n            if (plyr.duration) {\n                _updateTimeDisplay(duration, plyr.duration);\n            }\n\n            // Update the tooltip (if visible)\n            _updateSeekTooltip();\n        }\n\n        // Handle time change event\n        function _timeUpdate(event) {\n            // Duration\n            _updateTimeDisplay(plyr.media.currentTime, plyr.currentTime);\n\n            // Ignore updates while seeking\n            if (event && event.type === 'timeupdate' && plyr.media.seeking) {\n                return;\n            }\n\n            // Playing progress\n            _updateProgress(event);\n        }\n\n        // Update seek range and progress\n        function _updateSeekDisplay(time) {\n            // Default to 0\n            if (!_is.number(time)) {\n                time = 0;\n            }\n\n            var duration    = _getDuration(),\n                value       = _getPercentage(time, duration);\n\n            // Update progress\n            if (plyr.progress && plyr.progress.played) {\n                plyr.progress.played.value = value;\n            }\n\n            // Update seek range input\n            if (plyr.buttons && plyr.buttons.seek) {\n                plyr.buttons.seek.value = value;\n            }\n        }\n\n        // Update hover tooltip for seeking\n        function _updateSeekTooltip(event) {\n            var duration = _getDuration();\n\n            // Bail if setting not true\n            if (!config.tooltips.seek || !plyr.progress.container || duration === 0) {\n                return;\n            }\n\n            // Calculate percentage\n            var clientRect  = plyr.progress.container.getBoundingClientRect(),\n                percent     = 0,\n                visible     = config.classes.tooltip + '--visible';\n\n            // Determine percentage, if already visible\n            if (!event) {\n                if (_hasClass(plyr.progress.tooltip, visible)) {\n                    percent = plyr.progress.tooltip.style.left.replace('%', '');\n                } else {\n                    return;\n                }\n            } else {\n                percent = ((100 / clientRect.width) * (event.pageX - clientRect.left));\n            }\n\n            // Set bounds\n            if (percent < 0) {\n                percent = 0;\n            } else if (percent > 100) {\n                percent = 100;\n            }\n\n            // Display the time a click would seek to\n            _updateTimeDisplay(((duration / 100) * percent), plyr.progress.tooltip);\n\n            // Set position\n            plyr.progress.tooltip.style.left = percent + \"%\";\n\n            // Show/hide the tooltip\n            // If the event is a moues in/out and percentage is inside bounds\n            if (event && _inArray(['mouseenter', 'mouseleave'], event.type)) {\n                _toggleClass(plyr.progress.tooltip, visible, (event.type === 'mouseenter'));\n            }\n        }\n\n        // Show the player controls in fullscreen mode\n        function _toggleControls(toggle) {\n            // Don't hide if config says not to, it's audio, or not ready or loading\n            if (!config.hideControls || plyr.type === 'audio') {\n                return;\n            }\n\n            var delay = 0,\n                isEnterFullscreen = false,\n                show = toggle,\n                loading = _hasClass(plyr.container, config.classes.loading);\n\n            // Default to false if no boolean\n            if (!_is.boolean(toggle)) {\n                if (toggle && toggle.type) {\n                    // Is the enter fullscreen event\n                    isEnterFullscreen = (toggle.type === 'enterfullscreen');\n\n                    // Whether to show controls\n                    show = _inArray(['mousemove', 'touchstart', 'mouseenter', 'focus'], toggle.type);\n\n                    // Delay hiding on move events\n                    if (_inArray(['mousemove', 'touchmove'], toggle.type)) {\n                        delay = 2000;\n                    }\n\n                    // Delay a little more for keyboard users\n                    if (toggle.type === 'focus') {\n                        delay = 3000;\n                    }\n                } else {\n                    show = _hasClass(plyr.container, config.classes.hideControls);\n                }\n            }\n\n            // Clear timer every movement\n            window.clearTimeout(timers.hover);\n\n            // If the mouse is not over the controls, set a timeout to hide them\n            if (show || plyr.media.paused || loading) {\n                _toggleClass(plyr.container, config.classes.hideControls, false);\n\n                // Always show controls when paused or if touch\n                if (plyr.media.paused || loading) {\n                    return;\n                }\n\n                // Delay for hiding on touch\n                if (plyr.browser.isTouch) {\n                    delay = 3000;\n                }\n            }\n\n            // If toggle is false or if we're playing (regardless of toggle),\n            // then set the timer to hide the controls\n            if (!show || !plyr.media.paused) {\n                timers.hover = window.setTimeout(function() {\n                    // If the mouse is over the controls (and not entering fullscreen), bail\n                    if ((plyr.controls.pressed || plyr.controls.hover) && !isEnterFullscreen) {\n                        return;\n                    }\n\n                    _toggleClass(plyr.container, config.classes.hideControls, true);\n                }, delay);\n            }\n        }\n\n        // Add common function to retrieve media source\n        function _source(source) {\n            // If not null or undefined, parse it\n            if (!_is.undefined(source)) {\n                _updateSource(source);\n                return;\n            }\n\n            // Return the current source\n            var url;\n            switch(plyr.type) {\n                case 'youtube':\n                    url = plyr.embed.getVideoUrl();\n                    break;\n\n                case 'vimeo':\n                    plyr.embed.getVideoUrl.then(function (value) {\n                        url = value;\n                    });\n                    break;\n\n                case 'soundcloud':\n                    plyr.embed.getCurrentSound(function(object) {\n                        url = object.permalink_url;\n                    });\n                    break;\n\n                default:\n                    url = plyr.media.currentSrc;\n                    break;\n            }\n\n            return url || '';\n        }\n\n        // Update source\n        // Sources are not checked for support so be careful\n        function _updateSource(source) {\n            if (!_is.object(source) || !('sources' in source) || !source.sources.length) {\n                _warn('Invalid source format');\n                return;\n            }\n\n            // Remove ready class hook\n            _toggleClass(plyr.container, config.classes.ready, false);\n\n            // Pause playback\n            _pause();\n\n            // Update seek range and progress\n            _updateSeekDisplay();\n\n            // Reset buffer progress\n            _setProgress();\n\n            // Cancel current network requests\n            _cancelRequests();\n\n            // Setup new source\n            function setup() {\n                // Remove embed object\n                plyr.embed = null;\n\n                // Remove the old media\n                _remove(plyr.media);\n\n                // Remove video container\n                if (plyr.type === 'video' && plyr.videoContainer) {\n                    _remove(plyr.videoContainer);\n                }\n\n                // Reset class name\n                if (plyr.container) {\n                    plyr.container.removeAttribute('class');\n                }\n\n                // Set the type\n                if ('type' in source) {\n                    plyr.type = source.type;\n\n                    // Get child type for video (it might be an embed)\n                    if (plyr.type === 'video') {\n                        var firstSource = source.sources[0];\n\n                        if ('type' in firstSource && _inArray(config.types.embed, firstSource.type)) {\n                            plyr.type = firstSource.type;\n                        }\n                    }\n                }\n\n                // Check for support\n                plyr.supported = supported(plyr.type);\n\n                // Create new markup\n                switch(plyr.type) {\n                    case 'video':\n                        plyr.media = document.createElement('video');\n                        break;\n\n                    case 'audio':\n                        plyr.media = document.createElement('audio');\n                        break;\n\n                    case 'youtube':\n                    case 'vimeo':\n                    case 'soundcloud':\n                        plyr.media = document.createElement('div');\n                        plyr.embedId = source.sources[0].src;\n                        break;\n                }\n\n                // Inject the new element\n                _prependChild(plyr.container, plyr.media);\n\n                // Autoplay the new source?\n                if (_is.boolean(source.autoplay)) {\n                    config.autoplay = source.autoplay;\n                }\n\n                // Set attributes for audio and video\n                if (_inArray(config.types.html5, plyr.type)) {\n                    if (config.crossorigin) {\n                        plyr.media.setAttribute('crossorigin', '');\n                    }\n                    if (config.autoplay) {\n                        plyr.media.setAttribute('autoplay', '');\n                    }\n                    if ('poster' in source) {\n                        plyr.media.setAttribute('poster', source.poster);\n                    }\n                    if (config.loop) {\n                        plyr.media.setAttribute('loop', '');\n                    }\n                }\n\n                // Restore class hooks\n                _toggleClass(plyr.container, config.classes.fullscreen.active, plyr.isFullscreen);\n                _toggleClass(plyr.container, config.classes.captions.active, plyr.captionsEnabled);\n                _toggleStyleHook();\n\n                // Set new sources for html5\n                if (_inArray(config.types.html5, plyr.type)) {\n                    _insertChildElements('source', source.sources);\n                }\n\n                // Set up from scratch\n                _setupMedia();\n\n                // HTML5 stuff\n                if (_inArray(config.types.html5, plyr.type)) {\n                    // Setup captions\n                    if ('tracks' in source) {\n                        _insertChildElements('track', source.tracks);\n                    }\n\n                    // Load HTML5 sources\n                    plyr.media.load();\n                }\n\n                // If HTML5 or embed but not fully supported, setupInterface and call ready now\n                if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n                    // Setup interface\n                    _setupInterface();\n\n                    // Call ready\n                    _ready();\n                }\n\n                // Set aria title and iframe title\n                config.title = source.title;\n                _setTitle();\n            }\n\n            // Destroy instance adn wait for callback\n            // Vimeo throws a wobbly if you don't wait\n            _destroy(setup, false);\n        }\n\n        // Update poster\n        function _updatePoster(source) {\n            if (plyr.type === 'video') {\n                plyr.media.setAttribute('poster', source);\n            }\n        }\n\n        // Listen for control events\n        function _controlListeners() {\n            // IE doesn't support input event, so we fallback to change\n            var inputEvent = (plyr.browser.isIE ? 'change' : 'input');\n\n            // Click play/pause helper\n            function togglePlay() {\n                var play = _togglePlay();\n\n                // Determine which buttons\n                var trigger = plyr.buttons[play ? 'play' : 'pause'],\n                    target = plyr.buttons[play ? 'pause' : 'play'];\n\n                // Get the last play button to account for the large play button\n                if (target && target.length > 1) {\n                    target = target[target.length - 1];\n                } else {\n                    target = target[0];\n                }\n\n                // Setup focus and tab focus\n                if (target) {\n                    var hadTabFocus = _hasClass(trigger, config.classes.tabFocus);\n\n                    setTimeout(function() {\n                        target.focus();\n\n                        if (hadTabFocus) {\n                            _toggleClass(trigger, config.classes.tabFocus, false);\n                            _toggleClass(target, config.classes.tabFocus, true);\n                        }\n                    }, 100);\n                }\n            }\n\n            // Get the focused element\n            function getFocusElement() {\n                var focused = document.activeElement;\n\n                if (!focused || focused === document.body) {\n                    focused = null;\n                } else {\n                    focused = document.querySelector(':focus');\n                }\n\n                return focused;\n            }\n\n            // Get the key code for an event\n            function getKeyCode(event) {\n                return event.keyCode ? event.keyCode : event.which;\n            }\n\n            // Detect tab focus\n            function checkTabFocus(focused) {\n                for (var button in plyr.buttons) {\n                    var element = plyr.buttons[button];\n\n                    if (_is.nodeList(element)) {\n                        for (var i = 0; i < element.length; i++) {\n                            _toggleClass(element[i], config.classes.tabFocus, (element[i] === focused));\n                        }\n                    } else {\n                        _toggleClass(element, config.classes.tabFocus, (element === focused));\n                    }\n                }\n            }\n\n            // Keyboard shortcuts\n            if (config.keyboardShorcuts.focused) {\n                var last = null;\n\n                // Handle global presses\n                if (config.keyboardShorcuts.global) {\n                    _on(window, 'keydown keyup', function(event) {\n                        var code = getKeyCode(event),\n                        focused = getFocusElement(),\n                        allowed = [48,49,50,51,52,53,54,56,57,75,77,70,67],\n                        count   = get().length;\n\n                        // Only handle global key press if there's only one player\n                        // and the key is in the allowed keys\n                        // and if the focused element is not editable (e.g. text input)\n                        // and any that accept key input http://webaim.org/techniques/keyboard/\n                        if (count === 1 && _inArray(allowed, code) && (!_is.htmlElement(focused) || !_matches(focused, config.selectors.editable))) {\n                            handleKey(event);\n                        }\n                    });\n                }\n\n                // Handle presses on focused\n                _on(plyr.container, 'keydown keyup', handleKey);\n            }\n\n            function handleKey(event) {\n                var code = getKeyCode(event),\n                    pressed = event.type === 'keydown',\n                    held = pressed && code === last;\n\n                // If the event is bubbled from the media element\n                // Firefox doesn't get the keycode for whatever reason\n                if (!_is.number(code)) {\n                    return;\n                }\n\n                // Seek by the number keys\n                function seekByKey() {\n                    // Get current duration\n                    var duration = plyr.media.duration;\n\n                    // Bail if we have no duration set\n                    if (!_is.number(duration)) {\n                        return;\n                    }\n\n                    // Divide the max duration into 10th's and times by the number value\n                    _seek((duration / 10) * (code - 48));\n                }\n\n                // Handle the key on keydown\n                // Reset on keyup\n                if (pressed) {\n                    // Which keycodes should we prevent default\n                    var preventDefault = [48,49,50,51,52,53,54,56,57,32,75,38,40,77,39,37,70,67];\n\n                    // If the code is found prevent default (e.g. prevent scrolling for arrows)\n                    if (_inArray(preventDefault, code)) {\n                        event.preventDefault();\n                        event.stopPropagation();\n                    }\n\n                    switch(code) {\n                        // 0-9\n                        case 48:\n                        case 49:\n                        case 50:\n                        case 51:\n                        case 52:\n                        case 53:\n                        case 54:\n                        case 55:\n                        case 56:\n                        case 57: if (!held) { seekByKey(); } break;\n                        // Space and K key\n                        case 32:\n                        case 75: if (!held) { _togglePlay(); } break;\n                        // Arrow up\n                        case 38: _increaseVolume(); break;\n                        // Arrow down\n                        case 40: _decreaseVolume(); break;\n                        // M key\n                        case 77: if (!held) { _toggleMute() } break;\n                        // Arrow forward\n                        case 39: _forward(); break;\n                        // Arrow back\n                        case 37: _rewind(); break;\n                        // F key\n                        case 70: _toggleFullscreen(); break;\n                        // C key\n                        case 67: if (!held) { _toggleCaptions(); } break;\n                    }\n\n                    // Escape is handle natively when in full screen\n                    // So we only need to worry about non native\n                    if (!fullscreen.supportsFullScreen && plyr.isFullscreen && code === 27) {\n                        _toggleFullscreen();\n                    }\n\n                    // Store last code for next cycle\n                    last = code;\n                } else {\n                    last = null;\n                }\n            }\n\n            // Focus/tab management\n            _on(window, 'keyup', function(event) {\n                var code = getKeyCode(event),\n                    focused = getFocusElement();\n\n                if (code === 9) {\n                    checkTabFocus(focused);\n                }\n            });\n            _on(document.body, 'click', function() {\n                _toggleClass(_getElement('.' + config.classes.tabFocus), config.classes.tabFocus, false);\n            });\n            for (var button in plyr.buttons) {\n                var element = plyr.buttons[button];\n\n                _on(element, 'blur', function() {\n                    _toggleClass(element, 'tab-focus', false);\n                });\n            }\n\n            // Play\n            _proxyListener(plyr.buttons.play, 'click', config.listeners.play, togglePlay);\n\n            // Pause\n            _proxyListener(plyr.buttons.pause, 'click', config.listeners.pause, togglePlay);\n\n            // Restart\n            _proxyListener(plyr.buttons.restart, 'click', config.listeners.restart, _seek);\n\n            // Rewind\n            _proxyListener(plyr.buttons.rewind, 'click', config.listeners.rewind, _rewind);\n\n            // Fast forward\n            _proxyListener(plyr.buttons.forward, 'click', config.listeners.forward, _forward);\n\n            // Seek\n            _proxyListener(plyr.buttons.seek, inputEvent, config.listeners.seek, _seek);\n\n            // Set volume\n            _proxyListener(plyr.volume.input, inputEvent, config.listeners.volume, function() {\n                _setVolume(plyr.volume.input.value);\n            });\n\n            // Mute\n            _proxyListener(plyr.buttons.mute, 'click', config.listeners.mute, _toggleMute);\n\n            // Fullscreen\n            _proxyListener(plyr.buttons.fullscreen, 'click', config.listeners.fullscreen, _toggleFullscreen);\n\n            // Handle user exiting fullscreen by escaping etc\n            if (fullscreen.supportsFullScreen) {\n                _on(document, fullscreen.fullScreenEventName, _toggleFullscreen);\n            }\n\n            // Captions\n            _on(plyr.buttons.captions, 'click', _toggleCaptions);\n\n            // Seek tooltip\n            _on(plyr.progress.container, 'mouseenter mouseleave mousemove', _updateSeekTooltip);\n\n            // Toggle controls visibility based on mouse movement\n            if (config.hideControls) {\n                // Toggle controls on mouse events and entering fullscreen\n                _on(plyr.container, 'mouseenter mouseleave mousemove touchstart touchend touchcancel touchmove enterfullscreen', _toggleControls);\n\n                // Watch for cursor over controls so they don't hide when trying to interact\n                _on(plyr.controls, 'mouseenter mouseleave', function(event) {\n                    plyr.controls.hover = event.type === 'mouseenter';\n                });\n\n                 // Watch for cursor over controls so they don't hide when trying to interact\n                _on(plyr.controls, 'mousedown mouseup touchstart touchend touchcancel', function(event) {\n                    plyr.controls.pressed = _inArray(['mousedown', 'touchstart'], event.type);\n                });\n\n                // Focus in/out on controls\n                _on(plyr.controls, 'focus blur', _toggleControls, true);\n            }\n\n            // Adjust volume on scroll\n            _on(plyr.volume.input, 'wheel', function(event) {\n                event.preventDefault();\n\n                // Detect \"natural\" scroll - suppored on OS X Safari only\n                // Other browsers on OS X will be inverted until support improves\n                var inverted = event.webkitDirectionInvertedFromDevice,\n                    step = (config.volumeStep / 5);\n\n                // Scroll down (or up on natural) to decrease\n                if (event.deltaY < 0 || event.deltaX > 0) {\n                    if (inverted) {\n                        _decreaseVolume(step);\n                    } else {\n                        _increaseVolume(step);\n                    }\n                }\n\n                // Scroll up (or down on natural) to increase\n                if (event.deltaY > 0 || event.deltaX < 0) {\n                    if (inverted) {\n                        _increaseVolume(step);\n                    } else {\n                        _decreaseVolume(step);\n                    }\n                }\n            });\n        }\n\n        // Listen for media events\n        function _mediaListeners() {\n            // Time change on media\n            _on(plyr.media, 'timeupdate seeking', _timeUpdate);\n\n            // Update manual captions\n            _on(plyr.media, 'timeupdate', _seekManualCaptions);\n\n            // Display duration\n            _on(plyr.media, 'durationchange loadedmetadata', _displayDuration);\n\n            // Handle the media finishing\n            _on(plyr.media, 'ended', function() {\n                // Show poster on end\n                if (plyr.type === 'video' && config.showPosterOnEnd) {\n                    // Clear\n                    if (plyr.type === 'video') {\n                        _setCaption();\n                    }\n\n                    // Restart\n                    _seek();\n\n                    // Re-load media\n                    plyr.media.load();\n                }\n            });\n\n            // Check for buffer progress\n            _on(plyr.media, 'progress playing', _updateProgress);\n\n            // Handle native mute\n            _on(plyr.media, 'volumechange', _updateVolume);\n\n            // Handle native play/pause\n            _on(plyr.media, 'play pause ended', _checkPlaying);\n\n            // Loading\n            _on(plyr.media, 'waiting canplay seeked', _checkLoading);\n\n            // Click video\n            if (config.clickToPlay && plyr.type !== 'audio') {\n                // Re-fetch the wrapper\n                var wrapper = _getElement('.' + config.classes.videoWrapper);\n\n                // Bail if there's no wrapper (this should never happen)\n                if (!wrapper) {\n                    return;\n                }\n\n                // Set cursor\n                wrapper.style.cursor = \"pointer\";\n\n                // On click play, pause ore restart\n                _on(wrapper, 'click', function() {\n                    // Touch devices will just show controls (if we're hiding controls)\n                    if (config.hideControls && plyr.browser.isTouch && !plyr.media.paused) {\n                        return;\n                    }\n\n                    if (plyr.media.paused) {\n                        _play();\n                    } else if (plyr.media.ended) {\n                        _seek();\n                        _play();\n                    } else {\n                        _pause();\n                    }\n                });\n            }\n\n            // Disable right click\n            if (config.disableContextMenu) {\n                _on(plyr.media, 'contextmenu', function(event) { event.preventDefault(); });\n            }\n\n            // Proxy events to container\n            // Bubble up key events for Edge\n            _on(plyr.media, config.events.concat(['keyup', 'keydown']).join(' '), function(event) {\n                _triggerEvent(plyr.container, event.type, true);\n            });\n        }\n\n        // Cancel current network requests\n        // See https://github.com/Selz/plyr/issues/174\n        function _cancelRequests() {\n            if (!_inArray(config.types.html5, plyr.type)) {\n                return;\n            }\n\n            // Remove child sources\n            var sources = plyr.media.querySelectorAll('source');\n            for (var i = 0; i < sources.length; i++) {\n                _remove(sources[i]);\n            }\n\n            // Set blank video src attribute\n            // This is to prevent a MEDIA_ERR_SRC_NOT_SUPPORTED error\n            // Info: http://stackoverflow.com/questions/32231579/how-to-properly-dispose-of-an-html5-video-and-close-socket-or-connection\n            plyr.media.setAttribute('src', 'https://cdn.selz.com/plyr/blank.mp4');\n\n            // Load the new empty source\n            // This will cancel existing requests\n            // See https://github.com/Selz/plyr/issues/174\n            plyr.media.load();\n\n            // Debugging\n            _log('Cancelled network requests');\n        }\n\n        // Destroy an instance\n        // Event listeners are removed when elements are removed\n        // http://stackoverflow.com/questions/12528049/if-a-dom-element-is-removed-are-its-listeners-also-removed-from-memory\n        function _destroy(callback, restore) {\n            // Bail if the element is not initialized\n            if (!plyr.init) {\n                return null;\n            }\n\n            // Type specific stuff\n            switch (plyr.type) {\n                case 'youtube':\n                    // Clear timers\n                    window.clearInterval(timers.buffering);\n                    window.clearInterval(timers.playing);\n\n                    // Destroy YouTube API\n                    plyr.embed.destroy();\n\n                    // Clean up\n                    cleanUp();\n\n                    break;\n\n                case 'vimeo':\n                    // Destroy Vimeo API\n                    // then clean up (wait, to prevent postmessage errors)\n                    plyr.embed.unload().then(cleanUp);\n\n                    // Vimeo does not always return\n                    timers.cleanUp = window.setTimeout(cleanUp, 200);\n\n                    break;\n\n                case 'video':\n                case 'audio':\n                    // Restore native video controls\n                    _toggleNativeControls(true);\n\n                    // Clean up\n                    cleanUp();\n\n                    break;\n            }\n\n            function cleanUp() {\n                clearTimeout(timers.cleanUp);\n\n                // Default to restore original element\n                if (!_is.boolean(restore)) {\n                    restore = true;\n                }\n\n                // Callback\n                if (_is.function(callback)) {\n                    callback.call(original);\n                }\n\n                // Bail if we don't need to restore the original element\n                if (!restore) {\n                    return;\n                }\n\n                // Remove init flag\n                plyr.init = false;\n\n                // Replace the container with the original element provided\n                plyr.container.parentNode.replaceChild(original, plyr.container);\n\n                // Allow overflow (set on fullscreen)\n                document.body.style.overflow = '';\n\n                // Event\n                _triggerEvent(original, 'destroyed', true);\n            }\n        }\n\n        // Setup a player\n        function _init() {\n            // Bail if the element is initialized\n            if (plyr.init) {\n                return null;\n            }\n\n            // Setup the fullscreen api\n            fullscreen = _fullscreen();\n\n            // Sniff out the browser\n            plyr.browser = _browserSniff();\n\n            // Bail if nothing to setup\n            if (!_is.htmlElement(plyr.media)) {\n                return;\n            }\n\n            // Load saved settings from localStorage\n            _setupStorage();\n\n            // Set media type based on tag or data attribute\n            // Supported: video, audio, vimeo, youtube\n            var tagName = media.tagName.toLowerCase();\n            if (tagName === 'div') {\n                plyr.type     = media.getAttribute('data-type');\n                plyr.embedId  = media.getAttribute('data-video-id');\n\n                // Clean up\n                media.removeAttribute('data-type');\n                media.removeAttribute('data-video-id');\n            } else {\n                plyr.type           = tagName;\n                config.crossorigin  = (media.getAttribute('crossorigin') !== null);\n                config.autoplay     = (config.autoplay || (media.getAttribute('autoplay') !== null));\n                config.loop         = (config.loop || (media.getAttribute('loop') !== null));\n            }\n\n            // Check for support\n            plyr.supported = supported(plyr.type);\n\n            // If no native support, bail\n            if (!plyr.supported.basic) {\n                return;\n            }\n\n            // Wrap media\n            plyr.container = _wrap(media, document.createElement('div'));\n\n            // Allow focus to be captured\n            plyr.container.setAttribute('tabindex', 0);\n\n            // Add style hook\n            _toggleStyleHook();\n\n            // Debug info\n            _log('' + plyr.browser.name + ' ' + plyr.browser.version);\n\n            // Setup media\n            _setupMedia();\n\n            // Setup interface\n            // If embed but not fully supported, setupInterface (to avoid flash of controls) and call ready now\n            if (_inArray(config.types.html5, plyr.type) || (_inArray(config.types.embed, plyr.type) && !plyr.supported.full)) {\n                // Setup UI\n                _setupInterface();\n\n                // Call ready\n                _ready();\n\n                // Set title on button and frame\n                _setTitle();\n            }\n\n            // Successful setup\n            plyr.init = true;\n        }\n\n        // Setup the UI\n        function _setupInterface() {\n            // Don't setup interface if no support\n            if (!plyr.supported.full) {\n                _warn('Basic support only', plyr.type);\n\n                // Remove controls\n                _remove(_getElement(config.selectors.controls.wrapper));\n\n                // Remove large play\n                _remove(_getElement(config.selectors.buttons.play));\n\n                // Restore native controls\n                _toggleNativeControls(true);\n\n                // Bail\n                return;\n            }\n\n            // Inject custom controls if not present\n            var controlsMissing = !_getElements(config.selectors.controls.wrapper).length;\n            if (controlsMissing) {\n                // Inject custom controls\n                _injectControls();\n            }\n\n            // Find the elements\n            if (!_findElements()) {\n                return;\n            }\n\n            // If the controls are injected, re-bind listeners for controls\n            if (controlsMissing) {\n                _controlListeners();\n            }\n\n            // Media element listeners\n            _mediaListeners();\n\n            // Remove native controls\n            _toggleNativeControls();\n\n            // Setup fullscreen\n            _setupFullscreen();\n\n            // Captions\n            _setupCaptions();\n\n            // Set volume\n            _setVolume();\n            _updateVolume();\n\n            // Reset time display\n            _timeUpdate();\n\n            // Update the UI\n            _checkPlaying();\n        }\n\n        api = {\n            getOriginal:        function() { return original; },\n            getContainer:       function() { return plyr.container },\n            getEmbed:           function() { return plyr.embed; },\n            getMedia:           function() { return plyr.media; },\n            getType:            function() { return plyr.type; },\n            getDuration:        _getDuration,\n            getCurrentTime:     function() { return plyr.media.currentTime; },\n            getVolume:          function() { return plyr.media.volume; },\n            isMuted:            function() { return plyr.media.muted; },\n            isReady:            function() { return _hasClass(plyr.container, config.classes.ready); },\n            isLoading:          function() { return _hasClass(plyr.container, config.classes.loading); },\n            isPaused:           function() { return plyr.media.paused; },\n            on:                 function(event, callback) { _on(plyr.container, event, callback); return this; },\n            play:               _play,\n            pause:              _pause,\n            stop:               function() { _pause(); _seek(); },\n            restart:            _seek,\n            rewind:             _rewind,\n            forward:            _forward,\n            seek:               _seek,\n            source:             _source,\n            poster:             _updatePoster,\n            setVolume:          _setVolume,\n            togglePlay:         _togglePlay,\n            toggleMute:         _toggleMute,\n            toggleCaptions:     _toggleCaptions,\n            toggleFullscreen:   _toggleFullscreen,\n            toggleControls:     _toggleControls,\n            isFullscreen:       function() { return plyr.isFullscreen || false; },\n            support:            function(mimeType) { return _supportMime(plyr, mimeType); },\n            destroy:            _destroy\n        };\n\n        // Everything done\n        function _ready() {\n            // Ready event at end of execution stack\n            window.setTimeout(function() {\n                _triggerEvent(plyr.media, 'ready');\n            }, 0);\n\n            // Set class hook on media element\n            _toggleClass(plyr.media, defaults.classes.setup, true);\n\n            // Set container class for ready\n            _toggleClass(plyr.container, config.classes.ready, true);\n\n            // Store a refernce to instance\n            plyr.media.plyr = api;\n\n            // Autoplay\n            if (config.autoplay) {\n                _play();\n            }\n        }\n\n        // Initialize instance\n        _init();\n\n        // If init failed, return null\n        if (!plyr.init) {\n            return null;\n        }\n\n        return api;\n    }\n\n    // Load a sprite\n    function loadSprite(url, id) {\n        var x = new XMLHttpRequest();\n\n        // If the id is set and sprite exists, bail\n        if (_is.string(id) && _is.htmlElement(document.querySelector('#' + id))) {\n            return;\n        }\n\n        // Create placeholder (to prevent loading twice)\n        var container = document.createElement('div');\n        container.setAttribute('hidden', '');\n        if (_is.string(id)) {\n            container.setAttribute('id', id);\n        }\n        document.body.insertBefore(container, document.body.childNodes[0]);\n\n        // Check for CORS support\n        if ('withCredentials' in x) {\n            x.open('GET', url, true);\n        } else {\n            return;\n        }\n\n        // Inject hidden div with sprite on load\n        x.onload = function() {\n            container.innerHTML = x.responseText;\n        }\n\n        x.send();\n    }\n\n    // Check for support\n    function supported(type) {\n        var browser     = _browserSniff(),\n            isOldIE     = (browser.isIE && browser.version <= 9),\n            isIos       = browser.isIos,\n            isIphone    = browser.isIphone,\n            audioSupport = !!document.createElement('audio').canPlayType,\n            videoSupport = !!document.createElement('video').canPlayType,\n            basic       = false,\n            full        = false;\n\n        switch (type) {\n            case 'video':\n                basic = videoSupport;\n                full  = (basic && (!isOldIE && !isIphone));\n                break;\n\n            case 'audio':\n                basic = audioSupport;\n                full  = (basic && !isOldIE);\n                break;\n\n            // Vimeo does not seem to be supported on iOS via API\n            // Issue raised https://github.com/vimeo/player.js/issues/87\n            case 'vimeo':\n                basic = true;\n                full = (!isOldIE && !isIos);\n                break;\n\n            case 'youtube':\n                basic = true;\n                full = (!isOldIE && !isIos);\n\n                // YouTube seems to work on iOS 10+ on iPad\n                if (isIos && !isIphone && browser.version >= 10) {\n                    full = true;\n                }\n\n                break;\n\n            case 'soundcloud':\n                basic = true;\n                full  = (!isOldIE && !isIphone);\n                break;\n\n            default:\n                basic = (audioSupport && videoSupport);\n                full  = (basic && !isOldIE);\n        }\n\n        return {\n            basic:  basic,\n            full:   full\n        };\n    }\n\n    // Setup function\n    function setup(targets, options) {\n        // Get the players\n        var players     = [],\n            instances   = [],\n            selector    = [defaults.selectors.html5, defaults.selectors.embed].join(',');\n\n        // Select the elements\n        if (_is.string(targets)) {\n            // String selector passed\n            targets = document.querySelectorAll(targets);\n        }  else if (_is.htmlElement(targets)) {\n            // Single HTMLElement passed\n            targets = [targets];\n        }  else if (!_is.nodeList(targets) && !_is.array(targets) && !_is.string(targets))  {\n            // No selector passed, possibly options as first argument\n            // If options are the first argument\n            if (_is.undefined(options) && _is.object(targets)) {\n                options = targets;\n            }\n\n            // Use default selector\n            targets = document.querySelectorAll(selector);\n        }\n\n        // Convert NodeList to array\n        if (_is.nodeList(targets)) {\n            targets = Array.prototype.slice.call(targets);\n        }\n\n        // Bail if disabled or no basic support\n        // You may want to disable certain UAs etc\n        if (!supported().basic || !targets.length) {\n            return false;\n        }\n\n        // Add to container list\n        function add(target, media) {\n            if (!_hasClass(media, defaults.classes.hook)) {\n                players.push({\n                    // Always wrap in a <div> for styling\n                    //container:  _wrap(media, document.createElement('div')),\n                    // Could be a container or the media itself\n                    target:     target,\n                    // This should be the <video>, <audio> or <div> (YouTube/Vimeo)\n                    media:      media\n                });\n            }\n        }\n\n        // Check if the targets have multiple media elements\n        for (var i = 0; i < targets.length; i++) {\n            var target = targets[i];\n\n            // Get children\n            var children = target.querySelectorAll(selector);\n\n            // If there's more than one media element child, wrap them\n            if (children.length) {\n                for (var x = 0; x < children.length; x++) {\n                    add(target, children[x]);\n                }\n            } else if (_matches(target, selector)) {\n                // Target is media element\n                add(target, target);\n            }\n        }\n\n        // Create a player instance for each element\n        players.forEach(function(player) {\n            var element     = player.target,\n                media       = player.media,\n                match       = false;\n\n            // The target element can also be the media element\n            if (media === element) {\n                match = true;\n            }\n\n            // Setup a player instance and add to the element\n            // Create instance-specific config\n            var data = {};\n\n            // Try parsing data attribute config\n            try { data = JSON.parse(element.getAttribute('data-plyr')); }\n            catch(e) { }\n\n            var config = _extend({}, defaults, options, data);\n\n            // Bail if not enabled\n            if (!config.enabled) {\n                return null;\n            }\n\n            // Create new instance\n            var instance = new Plyr(media, config);\n\n            // Go to next if setup failed\n            if (!_is.object(instance)) {\n                return;\n            }\n\n            // Listen for events if debugging\n            if (config.debug) {\n                var events = config.events.concat(['setup', 'statechange', 'enterfullscreen', 'exitfullscreen', 'captionsenabled', 'captionsdisabled']);\n\n                _on(instance.getContainer(), events.join(' '), function(event) {\n                    console.log([config.logPrefix, 'event:', event.type].join(' '), event.detail.plyr);\n                });\n            }\n\n            // Callback\n            _event(instance.getContainer(), 'setup', true, {\n                plyr: instance\n            });\n\n            // Add to return array even if it's already setup\n            instances.push(instance);\n        });\n\n        return instances;\n    }\n\n    // Get all instances within a provided container\n    function get(container) {\n        if (_is.string(container)) {\n            // Get selector if string passed\n            container = document.querySelector(container);\n        } else if (_is.undefined(container)) {\n            // Use body by default to get all on page\n            container = document.body;\n        }\n\n        // If we have a HTML element\n        if (_is.htmlElement(container)) {\n            var elements = container.querySelectorAll('.' + defaults.classes.setup),\n                instances = [];\n\n            Array.prototype.slice.call(elements).forEach(function(element) {\n                if (_is.object(element.plyr)) {\n                    instances.push(element.plyr);\n                }\n            });\n\n            return instances;\n        }\n\n        return [];\n    }\n\n    return {\n        setup:      setup,\n        supported:  supported,\n        loadSprite: loadSprite,\n        get:        get\n    };\n}));\n\n// Custom event polyfill\n// https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n(function () {\n    if (typeof window.CustomEvent === 'function') {\n        return;\n    }\n\n    function CustomEvent(event, params) {\n        params = params || { bubbles: false, cancelable: false, detail: undefined };\n        var evt = document.createEvent('CustomEvent');\n        evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n        return evt;\n    }\n\n    CustomEvent.prototype = window.Event.prototype;\n\n    window.CustomEvent = CustomEvent;\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.27 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf(\"native code\")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.m=b||a;this.c=this.m.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&(\"style\"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}\nfunction w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(\" \").replace(/\\s+/g,\" \").replace(/^\\s+|\\s+$/,\"\")}function y(a,b){for(var c=a.className.split(/\\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}\nfunction z(a){if(\"string\"===typeof a.f)return a.f;var b=a.m.location.protocol;\"about:\"==b&&(b=a.a.location.protocol);return\"https:\"==b?\"https:\":\"http:\"}function ea(a){return a.m.location.hostname||a.a.location.hostname}\nfunction A(a,b,c){function d(){k&&e&&f&&(k(g),k=null)}b=t(a,\"link\",{rel:\"stylesheet\",href:b,media:\"all\"});var e=!1,f=!0,g=null,k=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error(\"Stylesheet failed to load\");d()}):setTimeout(function(){e=!0;d()},0);u(a,\"head\",b)}\nfunction B(a,b,c,d){var e=a.c.getElementsByTagName(\"head\")[0];if(e){var f=t(a,\"script\",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&\"loaded\"!=this.readyState&&\"complete\"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,\"HEAD\"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error(\"Script load timeout\")))},d||5E3);return f}return null};function C(){this.a=0;this.c=null}function D(a){a.a++;return function(){a.a--;E(a)}}function F(a,b){a.c=b;E(a)}function E(a){0==a.a&&a.c&&(a.c(),a.c=null)};function G(a){this.a=a||\"-\"}G.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\\W_]+/g,\"\").toLowerCase());return b.join(this.a)};function H(a,b){this.c=a;this.f=4;this.a=\"n\";var c=(b||\"n4\").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return I(a)+\" \"+(a.f+\"00\")+\" 300px \"+J(a.c)}function J(a){var b=[];a=a.split(/,\\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['\"]/g,\"\");-1!=d.indexOf(\" \")||/^\\d/.test(d)?b.push(\"'\"+d+\"'\"):b.push(d)}return b.join(\",\")}function K(a){return a.a+a.f}function I(a){var b=\"normal\";\"o\"===a.a?b=\"oblique\":\"i\"===a.a&&(b=\"italic\");return b}\nfunction ga(a){var b=4,c=\"n\",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.m.document.documentElement;this.h=b;this.a=new G(\"-\");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c(\"wf\",\"loading\")]);L(a,\"loading\")}function M(a){if(a.g){var b=y(a.f,a.a.c(\"wf\",\"active\")),c=[],d=[a.a.c(\"wf\",\"loading\")];b||c.push(a.a.c(\"wf\",\"inactive\"));w(a.f,c,d)}L(a,\"inactive\")}function L(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,K(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function N(a,b){this.c=a;this.f=b;this.a=t(this.c,\"span\",{\"aria-hidden\":\"true\"},this.f)}function O(a){u(a.c,\"body\",a.a)}function P(a){return\"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:\"+J(a.c)+\";\"+(\"font-style:\"+I(a)+\";font-weight:\"+(a.f+\"00\")+\";\")};function Q(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}Q.prototype.start=function(){var a=this.c.m.document,b=this,c=q(),d=new Promise(function(d,e){function k(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(k,25)},function(){e()})}k()}),e=new Promise(function(a,d){setTimeout(d,b.f)});Promise.race([e,d]).then(function(){b.g(b.a)},function(){b.j(b.a)})};function R(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||\"BESbswy\";this.f={};this.w=e||3E3;this.u=f||null;this.o=this.j=this.h=this.g=null;this.g=new N(this.c,this.s);this.h=new N(this.c,this.s);this.j=new N(this.c,this.s);this.o=new N(this.c,this.s);a=new H(this.a.c+\",serif\",K(this.a));a=P(a);this.g.a.style.cssText=a;a=new H(this.a.c+\",sans-serif\",K(this.a));a=P(a);this.h.a.style.cssText=a;a=new H(\"serif\",K(this.a));a=P(a);this.j.a.style.cssText=a;a=new H(\"sans-serif\",K(this.a));a=\nP(a);this.o.a.style.cssText=a;O(this.g);O(this.h);O(this.j);O(this.o)}var S={D:\"serif\",C:\"sans-serif\"},T=null;function U(){if(null===T){var a=/AppleWebKit\\/([0-9]+)(?:\\.([0-9]+))/.exec(window.navigator.userAgent);T=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return T}R.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f[\"sans-serif\"]=this.o.a.offsetWidth;this.A=q();la(this)};\nfunction ma(a,b,c){for(var d in S)if(S.hasOwnProperty(d)&&b===a.f[S[d]]&&c===a.f[S[d]])return!0;return!1}function la(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f[\"sans-serif\"])||(d=U()&&ma(a,b,c));d?q()-a.A>=a.w?U()&&ma(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):na(a):V(a,a.v)}function na(a){setTimeout(p(function(){la(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.o.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.o=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c(\"wf\",a.c,K(a).toString(),\"active\")],[b.a.c(\"wf\",a.c,K(a).toString(),\"loading\"),b.a.c(\"wf\",a.c,K(a).toString(),\"inactive\")]);L(b,\"fontactive\",a);this.o=!0;oa(this)};\nW.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c(\"wf\",a.c,K(a).toString(),\"active\")),d=[],e=[b.a.c(\"wf\",a.c,K(a).toString(),\"loading\")];c||d.push(b.a.c(\"wf\",a.c,K(a).toString(),\"inactive\"));w(b.f,d,e)}L(b,\"fontinactive\",a);oa(this)};function oa(a){0==--a.f&&a.j&&(a.o?(a=a.a,a.g&&w(a.f,[a.a.c(\"wf\",\"active\")],[a.a.c(\"wf\",\"loading\"),a.a.c(\"wf\",\"inactive\")]),L(a,\"active\")):M(a.a))};function pa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}pa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;qa(this,new ha(this.c,a),a)};\nfunction ra(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,k=d||null||{};if(0===c.length&&f)M(b.a);else{b.f+=c.length;f&&(b.j=f);var h,m=[];for(h=0;h<c.length;h++){var l=c[h],n=k[l.c],r=b.a,x=l;r.g&&w(r.f,[r.a.c(\"wf\",x.c,K(x).toString(),\"loading\")]);L(r,\"fontloading\",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\\/(\\d+)/.exec(window.navigator.userAgent),ya=/OS X.*Version\\/10\\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);\nX=x?42<parseInt(x[1],10):ya?!1:!0}else X=!1;X?r=new Q(p(b.g,b),p(b.h,b),b.c,l,b.s,n):r=new R(p(b.g,b),p(b.h,b),b.c,l,b.s,a,n);m.push(r)}for(h=0;h<m.length;h++)m[h].start()}},0)}function qa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){ra(a,f,b,d,c)})};function sa(a,b){this.c=a;this.a=b}function ta(a,b,c){var d=z(a.c);a=(a.a.api||\"fast.fonts.net/jsapi\").replace(/^.*http(s?):(\\/\\/)?/,\"\");return d+\"//\"+a+\"/\"+b+\".js\"+(c?\"?v=\"+c:\"\")}\nsa.prototype.load=function(a){function b(){if(f[\"__mti_fntLst\"+d]){var c=f[\"__mti_fntLst\"+d](),e=[],h;if(c)for(var m=0;m<c.length;m++){var l=c[m].fontfamily;void 0!=c[m].fontStyle&&void 0!=c[m].fontWeight?(h=c[m].fontStyle+c[m].fontWeight,e.push(new H(l,h))):e.push(new H(l))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.m;B(this.c,ta(c,d,e),function(e){e?a([]):(f[\"__MonotypeConfiguration__\"+d]=function(){return c.a},b())}).id=\"__MonotypeAPIScript__\"+\nd}else a([])};function ua(a,b){this.c=a;this.a=b}ua.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new C;b=0;for(c=d.length;b<c;b++)A(this.c,d[b],D(g));var k=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(\":\"),d[1])for(var h=d[1].split(\",\"),m=0;m<h.length;m+=1)k.push(new H(d[0],h[m]));else k.push(new H(d[0]));F(g,function(){a(k,f)})};function va(a,b,c){a?this.c=a:this.c=b+wa;this.a=[];this.f=[];this.g=c||\"\"}var wa=\"//fonts.googleapis.com/css\";function xa(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(\":\");3==e.length&&a.f.push(e.pop());var f=\"\";2==e.length&&\"\"!=e[1]&&(f=\":\");a.a.push(e.join(f))}}\nfunction za(a){if(0==a.a.length)throw Error(\"No fonts to load!\");if(-1!=a.c.indexOf(\"kit=\"))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,\"+\"));b=a.c+\"?family=\"+c.join(\"%7C\");0<a.f.length&&(b+=\"&subset=\"+a.f.join(\",\"));0<a.g.length&&(b+=\"&text=\"+encodeURIComponent(a.g));return b};function Aa(a){this.f=a;this.a=[];this.c={}}\nvar Ba={latin:\"BESbswy\",\"latin-ext\":\"\\u00e7\\u00f6\\u00fc\\u011f\\u015f\",cyrillic:\"\\u0439\\u044f\\u0416\",greek:\"\\u03b1\\u03b2\\u03a3\",khmer:\"\\u1780\\u1781\\u1782\",Hanuman:\"\\u1780\\u1781\\u1782\"},Ca={thin:\"1\",extralight:\"2\",\"extra-light\":\"2\",ultralight:\"2\",\"ultra-light\":\"2\",light:\"3\",regular:\"4\",book:\"4\",medium:\"5\",\"semi-bold\":\"6\",semibold:\"6\",\"demi-bold\":\"6\",demibold:\"6\",bold:\"7\",\"extra-bold\":\"8\",extrabold:\"8\",\"ultra-bold\":\"8\",ultrabold:\"8\",black:\"9\",heavy:\"9\",l:\"3\",r:\"4\",b:\"7\"},Da={i:\"i\",italic:\"i\",n:\"n\",normal:\"n\"},\nEa=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;\nfunction Fa(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(\":\"),e=d[0].replace(/\\+/g,\" \"),f=[\"n4\"];if(2<=d.length){var g;var k=d[1];g=[];if(k)for(var k=k.split(\",\"),h=k.length,m=0;m<h;m++){var l;l=k[m];if(l.match(/^[\\w-]+$/)){var n=Ea.exec(l.toLowerCase());if(null==n)l=\"\";else{l=n[2];l=null==l||\"\"==l?\"n\":Da[l];n=n[1];if(null==n||\"\"==n)n=\"4\";else var r=Ca[n],n=r?r:isNaN(n)?\"4\":n.substr(0,1);l=[l,n].join(\"\")}}else l=\"\";l&&g.push(l)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(\",\"):\ng,0<d.length&&(d=Ba[d[0]])&&(a.c[e]=d))}a.c[e]||(d=Ba[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new H(e,f[d]))}};function Ga(a,b){this.c=a;this.a=b}var Ha={Arimo:!0,Cousine:!0,Tinos:!0};Ga.prototype.load=function(a){var b=new C,c=this.c,d=new va(this.a.api,z(c),this.a.text),e=this.a.families;xa(d,e);var f=new Aa(e);Fa(f);A(c,za(d),D(b));F(b,function(){a(f.a,f.c,Ha)})};function Ia(a,b){this.c=a;this.a=b}Ia.prototype.load=function(a){var b=this.a.id,c=this.c.m;b?B(this.c,(this.a.api||\"https://use.typekit.net\")+\"/\"+b+\".js\",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],k=b[f+1],h=0;h<k.length;h++)e.push(new H(g,k[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(m){}a(e)}},2E3):a([])};function Ja(a,b){this.c=a;this.f=b;this.a=[]}Ja.prototype.load=function(a){var b=this.f.id,c=this.c.m,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,k=c.fonts.length;g<k;++g){var h=c.fonts[g];d.a.push(new H(h.name,ga(\"font-weight:\"+h.weight+\";font-style:\"+h.style)))}a(d.a)},B(this.c,z(this.c)+(this.f.api||\"//f.fontdeck.com/s/css/js/\")+ea(this.c)+\"/\"+b+\".js\",function(b){b&&a([])})):a([])};var Y=new pa(window);Y.a.c.custom=function(a,b){return new ua(b,a)};Y.a.c.fontdeck=function(a,b){return new Ja(b,a)};Y.a.c.monotype=function(a,b){return new sa(b,a)};Y.a.c.typekit=function(a,b){return new Ia(b,a)};Y.a.c.google=function(a,b){return new Ga(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = function(){return Z}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):\"undefined\"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(0);\n\n__webpack_require__(1);\n\n__webpack_require__(2);\n\nconsole.log(true);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2pzL21haW4uanM/MTgxMyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnJlcXVpcmUoJy4vX2Zhc3RjbGljaycpO1xuXG5yZXF1aXJlKCcuL19mb250cycpO1xuXG5yZXF1aXJlKCcuL192aWRlb3MnKTtcblxuY29uc29sZS5sb2codHJ1ZSk7XG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9qcy9tYWluLmpzXG4vLyBtb2R1bGUgaWQgPSA2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9");

/***/ })
/******/ ]);